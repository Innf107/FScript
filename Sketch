statement -> import | def | run

import -> 'import' id

def -> id '=' expr

run -> expr

expr -> (expr) | lit | let | id | fcall

let -> 'let' name '=' expr

fcall -> expr expr

-- f x
-- statement
-- run (expr)
-- run (fcall)
-- run (fcall (expr expr))
-- run (fcall (id id))
-- run (fcall (id(f) id(x)))

[Run (FCall (Var "print") (FCall (Var "id") (Literal (IntL 5))) )]
[Run (FCall (Var "print") (FCall (Var "id") (FCall (Literal (IntL 4)) (Literal (IntL 3)))))]

FCall (Var "add") (FCall (Literal (IntL 1)) (Literal (IntL 2)))
FCall (Var "add") (FCall (Literal (IntL 1)) (Literal (IntL 2)))

Literal (ListL [Literal (CharL 'H'),Literal (CharL 'e'),Literal (CharL 'l'),Literal (CharL 'l'),Literal (CharL 'o'),
Literal (CharL ','),Literal (CharL ' '),Literal (CharL 'W'),Literal (CharL 'o'),Literal (CharL 'r'),Literal (CharL 'l'),
Literal (CharL 'd'),Literal (CharL '!')]

 RTState {getVals = [("f",FuncV "x" (Literal (LambdaL "y" (Literal (LambdaL "z" (Var "x"))))) []),("range",FuncV "s" (Literal (LambdaL "e" (If (FCall (FCall (Var "eq") (Var "s")) (Var "e")) (Literal (ListL [])) (FCall (FCall (Var "cons") (Var "s")) (FCall (FCall (Var "range") (FCall (FCall (Var "add") (Var "s")) (Literal (IntL 1)))) (Var "e")))))) []),("map",FuncV "f" (Literal (LambdaL "l" (If (Var "l") (Let "x" (FCall (Var "head") (Var "l")) (Let "xs" (FCall (Var "tail") (Var "l")) (FCall (FCall (Var "cons") (FCall (Var "f") (Var "x"))) (FCall (FCall (Var "map") (Var "f")) (Var "xs"))))) (Var "l")))) []),("factorial",FuncV "n" (If (Var "n") (FCall (FCall (Var "mul") (Var "n")) (FCall (Var "factorial") (FCall (FCall (Var "sub") (Var "n")) (Literal (IntL 1))))) (Literal (IntL 1))) []),("comp",FuncV "f" (Literal (LambdaL "g" (Literal (LambdaL "x" (FCall (Var "f") (FCall (Var "g") (Var "x"))))))) []),("eq",FuncV "x" (Literal (LambdaL "y" (FCall (Var "not") (FCall (FCall (Var "ord") (Var "x")) (Var "y"))))) []),("not",FuncV "x" (If (Var "x") (Literal (BoolL False)) (Literal (BoolL True))) []),("toBool",FuncV "x" (FCall (Var "not") (FCall (Var "not") (Var "x"))) []),("print",FuncV "x" (FCall (Var "put") (FCall (Var "show") (Var "x"))) []),("id",FuncV "x" (Var "x") []),("put",NativeF (RTValue -> RTState -> RTValue) []),("show",NativeF (RTValue -> RTState -> RTValue) []),("debugRaw",NativeF (RTValue -> RTState -> RTValue) []),("head",NativeF (RTValue -> RTState -> RTValue) []),("tail",NativeF (RTValue -> RTState -> RTValue) []),("exec",NativeF (RTValue -> RTState -> RTValue) []),("typeof",NativeF (RTValue -> RTState -> RTValue) []),("add",FuncV "x" (Value (NativeF (RTValue -> RTState -> RTValue) [])) []),("sub",FuncV "x" (Value (NativeF (RTValue -> RTState -> RTValue) [])) []),("ord",FuncV "x" (Value (NativeF (RTValue -> RTState -> RTValue) [])) []),("mul",FuncV "x" (Value (NativeF (RTValue -> RTState -> RTValue) [])) []),("cons",FuncV "x" (Value (NativeF (RTValue -> RTState -> RTValue) [])) [])],
          getArgs = [("z",IntV 5)],
          getClosures = [("y",IntV 4)]}


instance Bifunctor Either where
    bimap f _ (Left x)  = Left  (f x)
    bimap _ f (Right x) = Right (f x)

instance Bifunctor (,) where
    bimap f g (x, y) = (f x, g y)


 ______   ______   ______   ______     __   ______    __________
|   ___| |   ___| |   ___| |   __  \  |  | |   __  \ |___    ___|
|  |___  |  |___  |  |     |  |__|  | |  | |  |__|  |    |  |
|   ___| |___   | |  |     |       /  |  | |   ____/     |  |
|  |      ___|  | |  |___  |  |\  \   |  | |  |          |  |
|__|     |______| |______| |__| \__\  |__| |__|          |__|


[Run (FCall (Var "print") (Let (NormalDef "x" (Literal (LambdaL "y" (Let (NormalDef "z" (Literal (NumL 3.0))) (FCall (FCall (Var "y") (Var "+")) (Var "z")))))) (FCall (Var "x") (Literal (NumL 4.0)))))]




(Let
    (NormalDef "x"
        (Literal
            (LambdaL "y"
                (Let
                    (NormalDef "z"
                        (Literal
                            (NumL 3.0)))
                    (FCall
                        (FCall
                            (Var "y")
                            (Var "+"))
                        (Var "z"))))))
    (FCall
        (Var "x")
        (Literal
            (NumL 4.0))))


 RTState {getVals = fromList [
 ("!!", ExceptionV "State" "Value getAt does not exist in the current state! \n\nCurrent Args were: fromList []\n\nClosures were: fromList []\n\nThe Full State was: RTState {getVals = fromList [(\"!=\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (Var \"not\") (FCall (FCall (Var \"==\") (Var \"x\")) (Var \"y\"))))) (fromList [])),(\"&&\",FuncV \"x\" (Literal (LambdaL \"y\" (If (Var \"x\") (Var \"y\") (Var \"x\")))) (fromList [])),(\"*\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"/\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"/=\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (Var \"not\") (FCall (FCall (Var \"==\") (Var \"x\")) (Var \"y\"))))) (fromList [])),(\":\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"::\",FuncV \"s\" (Literal (LambdaL \"e\" (If (FCall (FCall (Var \">=\") (Var \"s\")) (Var \"e\")) (Literal (ListL [])) (FCall (FCall (Var \"cons\") (Var \"s\")) (FCall (FCall (Var \"range\") (FCall (FCall (Var \"+\") (Var \"s\")) (Literal (NumL 1.0)))) (Var \"e\")))))) (fromList [])),(\"::+\",FuncV \"s\" (Literal (LambdaL \"e\" (FCall (FCall (Var \"range\") (Var \"s\")) (FCall (FCall (Var \"+\") (Var \"e\")) (Literal (NumL 1.0)))))) (fromList [])),(\"<\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (FCall (Var \"eq\") (Literal (NumL (-1.0)))) (FCall (FCall (Var \"ord\") (Var \"x\")) (Var \"y\"))))) (fromList [])),(\"<$>\",ExceptionV \"State\" \"Value map does not exist in the current state! \\n\\nCurrent Args were: fromList []\\n\\nClosures were: fromList []\\n\\nThe Full State was: RTState {getVals = fromList [(\\\"!=\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (Var \\\"not\\\") (FCall (FCall (Var \\\"==\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))))) (fromList [])),(\\\"&&\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (If (Var \\\"x\\\") (Var \\\"y\\\") (Var \\\"x\\\")))) (fromList [])),(\\\"*\\\",FuncV \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"/\\\",FuncV \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"/=\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (Var \\\"not\\\") (FCall (FCall (Var \\\"==\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))))) (fromList [])),(\\\"<\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (FCall (Var \\\"eq\\\") (Literal (NumL (-1.0)))) (FCall (FCall (Var \\\"ord\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))))) (fromList [])),(\\\"<=\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (Var \\\"not\\\") (FCall (FCall (Var \\\">\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))))) (fromList [])),(\\\"==\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (Var \\\"not\\\") (FCall (FCall (Var \\\"ord\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))))) (fromList [])),(\\\">\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (FCall (Var \\\"eq\\\") (Literal (NumL 1.0))) (FCall (FCall (Var \\\"ord\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))))) (fromList [])),(\\\">=\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (Var \\\"not\\\") (FCall (FCall (Var \\\"<\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))))) (fromList [])),(\\\">>\\\",FuncV \\\"f\\\" (Literal (LambdaL \\\"g\\\" (Literal (LambdaL \\\"x\\\" (FCall (Var \\\"f\\\") (FCall (Var \\\"g\\\") (Var \\\"x\\\"))))))) (fromList [])),(\\\"^\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"n\\\" (If (Var \\\"n\\\") (FCall (FCall (Var \\\"*\\\") (Var \\\"x\\\")) (FCall (FCall (Var \\\"powN\\\") (Var \\\"x\\\")) (FCall (FCall (Var \\\"-\\\") (Var \\\"n\\\")) (Literal (NumL 1.0))))) (Literal (NumL 1.0))))) (fromList [])),(\\\"abs\\\",FuncV \\\"x\\\" (If (FCall (FCall (Var \\\"<\\\") (Var \\\"x\\\")) (Literal (NumL 0.0))) (FCall (FCall (Var \\\"-\\\") (Literal (NumL 0.0))) (Var \\\"x\\\")) (Var \\\"x\\\")) (fromList [])),(\\\"addNum\\\",FuncV \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"and\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (If (Var \\\"x\\\") (Var \\\"y\\\") (Var \\\"x\\\")))) (fromList [])),(\\\"comp\\\",FuncV \\\"f\\\" (Literal (LambdaL \\\"g\\\" (Literal (LambdaL \\\"x\\\" (FCall (Var \\\"f\\\") (FCall (Var \\\"g\\\") (Var \\\"x\\\"))))))) (fromList [])),(\\\"compIO\\\",FuncV \\\"io\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"cons\\\",FuncV \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"const\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (Var \\\"x\\\"))) (fromList [])),(\\\"debugRaw\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"debugState\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"div\\\",FuncV \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"divBy\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (FCall (Var \\\"f\\\") (Var \\\"y\\\")) (Var \\\"x\\\")))) (fromList [(\\\"f\\\",FuncV \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList []))])),(\\\"e\\\",NumV 2.7182817),(\\\"entries\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"eq\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (Var \\\"not\\\") (FCall (FCall (Var \\\"ord\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))))) (fromList [])),(\\\"eval\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"exec\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"factorial\\\",FuncV \\\"n\\\" (If (Var \\\"n\\\") (FCall (FCall (Var \\\"*\\\") (Var \\\"n\\\")) (FCall (Var \\\"factorial\\\") (FCall (FCall (Var \\\"-\\\") (Var \\\"n\\\")) (Literal (NumL 1.0))))) (Literal (NumL 1.0))) (fromList [])),(\\\"flatMap\\\",FuncV \\\"f\\\" (Literal (LambdaL \\\"l\\\" (If (Var \\\"l\\\") (Let (DestDef \\\"HT\\\" [\\\"x\\\",\\\"xs\\\"] (Var \\\"l\\\")) (FCall (FCall (Var \\\"+\\\") (FCall (Var \\\"f\\\") (Var \\\"x\\\"))) (FCall (FCall (Var \\\"flatMap\\\") (Var \\\"f\\\")) (Var \\\"xs\\\")))) (Literal (ListL []))))) (fromList [])),(\\\"flip\\\",FuncV \\\"f\\\" (Literal (LambdaL \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (FCall (Var \\\"f\\\") (Var \\\"y\\\")) (Var \\\"x\\\")))))) (fromList [])),(\\\"gcd\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (FCall (Var \\\"gcd_\\\") (FCall (Var \\\"abs\\\") (Var \\\"x\\\"))) (FCall (Var \\\"abs\\\") (Var \\\"y\\\"))))) (fromList [])),(\\\"gcd_\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (If (Var \\\"y\\\") (FCall (FCall (Var \\\"gcd_\\\") (Var \\\"y\\\")) (FCall (FCall (Var \\\"rem\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))) (Var \\\"x\\\")))) (fromList [])),(\\\"get\\\",FuncV \\\"n\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"gt\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (FCall (Var \\\"eq\\\") (Literal (NumL 1.0))) (FCall (FCall (Var \\\"ord\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))))) (fromList [])),(\\\"head\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"id\\\",FuncV \\\"x\\\" (Var \\\"x\\\") (fromList [])),(\\\"lt\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (FCall (Var \\\"eq\\\") (Literal (NumL (-1.0)))) (FCall (FCall (Var \\\"ord\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))))) (fromList [])),(\\\"mapI\\\",FuncV \\\"f\\\" (Literal (LambdaL \\\"l\\\" (FCall (FCall (FCall (Var \\\"mapIS\\\") (Var \\\"f\\\")) (Var \\\"l\\\")) (Literal (NumL 0.0))))) (fromList [])),(\\\"mapIS\\\",FuncV \\\"f\\\" (Literal (LambdaL \\\"l\\\" (Literal (LambdaL \\\"i\\\" (If (Var \\\"l\\\") (Let (DestDef \\\"HT\\\" [\\\"x\\\",\\\"xs\\\"] (Var \\\"l\\\")) (FCall (FCall (Var \\\"cons\\\") (FCall (FCall (Var \\\"f\\\") (Var \\\"x\\\")) (Var \\\"i\\\"))) (FCall (FCall (FCall (Var \\\"mapIS\\\") (Var \\\"f\\\")) (Var \\\"xs\\\")) (FCall (FCall (Var \\\"+\\\") (Var \\\"i\\\")) (Literal (NumL 1.0)))))) (Literal (ListL []))))))) (fromList [])),(\\\"max\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (If (FCall (FCall (Var \\\"x\\\") (Var \\\">\\\")) (Var \\\"y\\\")) (Var \\\"x\\\") (Var \\\"y\\\")))) (fromList [])),(\\\"min\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (FCall (Var \\\"f\\\") (Var \\\"y\\\")) (Var \\\"x\\\")))) (fromList [(\\\"f\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (If (FCall (FCall (Var \\\"x\\\") (Var \\\">\\\")) (Var \\\"y\\\")) (Var \\\"x\\\") (Var \\\"y\\\")))) (fromList []))])),(\\\"mul\\\",FuncV \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"not\\\",FuncV \\\"x\\\" (If (Var \\\"x\\\") (Literal (BoolL False)) (Literal (BoolL True))) (fromList [])),(\\\"or\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (If (Var \\\"x\\\") (Var \\\"x\\\") (Var \\\"y\\\")))) (fromList [])),(\\\"ord\\\",FuncV \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"pi\\\",NumV 3.1415927),(\\\"powN\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"n\\\" (If (Var \\\"n\\\") (FCall (FCall (Var \\\"*\\\") (Var \\\"x\\\")) (FCall (FCall (Var \\\"powN\\\") (Var \\\"x\\\")) (FCall (FCall (Var \\\"-\\\") (Var \\\"n\\\")) (Literal (NumL 1.0))))) (Literal (NumL 1.0))))) (fromList [])),(\\\"print\\\",FuncV \\\"x\\\" (FCall (Var \\\"put\\\") (FCall (Var \\\"show\\\") (Var \\\"x\\\"))) (fromList [])),(\\\"printOrExec\\\",FuncV \\\"x\\\" (If (FCall (FCall (Var \\\"==\\\") (FCall (Var \\\"typeof\\\") (Var \\\"x\\\"))) (Literal (ListL [Literal (CharL 'I'),Literal (CharL 'O')]))) (Var \\\"x\\\") (FCall (Var \\\"print\\\") (Var \\\"x\\\"))) (fromList [])),(\\\"printP\\\",FuncV \\\"x\\\" (FCall (Var \\\"put\\\") (FCall (Var \\\"showP\\\") (Var \\\"x\\\"))) (fromList [])),(\\\"pureIO\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"put\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"readLine\\\",IOV ReadLine),(\\\"rem\\\",FuncV \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"root\\\",FuncV \\\"r\\\" (Literal (LambdaL \\\"x\\\" (FCall (FCall (FCall (Var \\\"rootInner\\\") (Var \\\"r\\\")) (Var \\\"x\\\")) (FCall (Var \\\"round\\\") (FCall (FCall (Var \\\"/\\\") (Var \\\"x\\\")) (Literal (NumL 2.0))))))) (fromList [])),(\\\"rootInner\\\",FuncV \\\"r\\\" (Literal (LambdaL \\\"x\\\" (Literal (LambdaL \\\"guess\\\" (If (FCall (FCall (Var \\\"<\\\") (FCall (FCall (Var \\\"||\\\") (FCall (FCall (Var \\\"<\\\") (FCall (Var \\\"abs\\\") (FCall (FCall (Var \\\"-\\\") (FCall (FCall (Var \\\"powN\\\") (Var \\\"guess\\\")) (Var \\\"r\\\"))) (Var \\\"x\\\")))) (FCall (FCall (Var \\\"*\\\") (Literal (NumL 0.1))) (Var \\\"x\\\")))) (Var \\\"guess\\\"))) (Literal (NumL 1.0e-2))) (Var \\\"guess\\\") (FCall (FCall (FCall (Var \\\"rootInner\\\") (Var \\\"r\\\")) (Var \\\"x\\\")) (FCall (FCall (Var \\\"/\\\") (FCall (FCall (Var \\\"+\\\") (FCall (FCall (Var \\\"*\\\") (FCall (FCall (Var \\\"-\\\") (Var \\\"r\\\")) (Literal (NumL 1.0)))) (Var \\\"guess\\\"))) (FCall (FCall (Var \\\"/\\\") (Var \\\"x\\\")) (FCall (FCall (Var \\\"powN\\\") (Var \\\"guess\\\")) (FCall (FCall (Var \\\"-\\\") (Var \\\"r\\\")) (Literal (NumL 1.0))))))) (Literal (NumL 2.0))))))))) (fromList [])),(\\\"round\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"set\\\",FuncV \\\"n\\\" (Literal (LambdaL \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))))) (fromList [])),(\\\"showNum\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"sqrt\\\",FuncV \\\"x\\\" (FCall (FCall (Var \\\"root\\\") (Literal (NumL 2.0))) (Var \\\"x\\\")) (fromList [])),(\\\"subBy\\\",ExceptionV \\\"State\\\" \\\"Value sub does not exist in the current state! \\\\n\\\\nCurrent Args were: fromList []\\\\n\\\\nClosures were: fromList []\\\\n\\\\nThe Full State was: RTState {getVals = fromList [(\\\\\\\"!=\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Literal (LambdaL \\\\\\\"y\\\\\\\" (FCall (Var \\\\\\\"not\\\\\\\") (FCall (FCall (Var \\\\\\\"==\\\\\\\") (Var \\\\\\\"x\\\\\\\")) (Var \\\\\\\"y\\\\\\\"))))) (fromList [])),(\\\\\\\"&&\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Literal (LambdaL \\\\\\\"y\\\\\\\" (If (Var \\\\\\\"x\\\\\\\") (Var \\\\\\\"y\\\\\\\") (Var \\\\\\\"x\\\\\\\")))) (fromList [])),(\\\\\\\"*\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\\\\\"/\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\\\\\"/=\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Literal (LambdaL \\\\\\\"y\\\\\\\" (FCall (Var \\\\\\\"not\\\\\\\") (FCall (FCall (Var \\\\\\\"==\\\\\\\") (Var \\\\\\\"x\\\\\\\")) (Var \\\\\\\"y\\\\\\\"))))) (fromList [])),(\\\\\\\"<\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Literal (LambdaL \\\\\\\"y\\\\\\\" (FCall (FCall (Var \\\\\\\"eq\\\\\\\") (Literal (NumL (-1.0)))) (FCall (FCall (Var \\\\\\\"ord\\\\\\\") (Var \\\\\\\"x\\\\\\\")) (Var \\\\\\\"y\\\\\\\"))))) (fromList [])),(\\\\\\\"<=\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Literal (LambdaL \\\\\\\"y\\\\\\\" (FCall (Var \\\\\\\"not\\\\\\\") (FCall (FCall (Var \\\\\\\">\\\\\\\") (Var \\\\\\\"x\\\\\\\")) (Var \\\\\\\"y\\\\\\\"))))) (fromList [])),(\\\\\\\"==\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Literal (LambdaL \\\\\\\"y\\\\\\\" (FCall (Var \\\\\\\"not\\\\\\\") (FCall (FCall (Var \\\\\\\"ord\\\\\\\") (Var \\\\\\\"x\\\\\\\")) (Var \\\\\\\"y\\\\\\\"))))) (fromList [])),(\\\\\\\">\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Literal (LambdaL \\\\\\\"y\\\\\\\" (FCall (FCall (Var \\\\\\\"eq\\\\\\\") (Literal (NumL 1.0))) (FCall (FCall (Var \\\\\\\"ord\\\\\\\") (Var \\\\\\\"x\\\\\\\")) (Var \\\\\\\"y\\\\\\\"))))) (fromList [])),(\\\\\\\">=\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Literal (LambdaL \\\\\\\"y\\\\\\\" (FCall (Var \\\\\\\"not\\\\\\\") (FCall (FCall (Var \\\\\\\"<\\\\\\\") (Var \\\\\\\"x\\\\\\\")) (Var \\\\\\\"y\\\\\\\"))))) (fromList [])),(\\\\\\\">>\\\\\\\",FuncV \\\\\\\"f\\\\\\\" (Literal (LambdaL \\\\\\\"g\\\\\\\" (Literal (LambdaL \\\\\\\"x\\\\\\\" (FCall (Var \\\\\\\"f\\\\\\\") (FCall (Var \\\\\\\"g\\\\\\\") (Var \\\\\\\"x\\\\\\\"))))))) (fromList [])),(\\\\\\\"^\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Literal (LambdaL \\\\\\\"n\\\\\\\" (If (Var \\\\\\\"n\\\\\\\") (FCall (FCall (Var \\\\\\\"*\\\\\\\") (Var \\\\\\\"x\\\\\\\")) (FCall (FCall (Var \\\\\\\"powN\\\\\\\") (Var \\\\\\\"x\\\\\\\")) (FCall (FCall (Var \\\\\\\"-\\\\\\\") (Var \\\\\\\"n\\\\\\\")) (Literal (NumL 1.0))))) (Literal (NumL 1.0))))) (fromList [])),(\\\\\\\"addNum\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\\\\\"and\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Literal (LambdaL \\\\\\\"y\\\\\\\" (If (Var \\\\\\\"x\\\\\\\") (Var \\\\\\\"y\\\\\\\") (Var \\\\\\\"x\\\\\\\")))) (fromList [])),(\\\\\\\"comp\\\\\\\",FuncV \\\\\\\"f\\\\\\\" (Literal (LambdaL \\\\\\\"g\\\\\\\" (Literal (LambdaL \\\\\\\"x\\\\\\\" (FCall (Var \\\\\\\"f\\\\\\\") (FCall (Var \\\\\\\"g\\\\\\\") (Var \\\\\\\"x\\\\\\\"))))))) (fromList [])),(\\\\\\\"compIO\\\\\\\",FuncV \\\\\\\"io\\\\\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\\\\\"cons\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\\\\\"const\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Literal (LambdaL \\\\\\\"y\\\\\\\" (Var \\\\\\\"x\\\\\\\"))) (fromList [])),(\\\\\\\"debugRaw\\\\\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\\\\\"debugState\\\\\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\\\\\"div\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\\\\\"divBy\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Literal (LambdaL \\\\\\\"y\\\\\\\" (FCall (FCall (Var \\\\\\\"f\\\\\\\") (Var \\\\\\\"y\\\\\\\")) (Var \\\\\\\"x\\\\\\\")))) (fromList [(\\\\\\\"f\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList []))])),(\\\\\\\"e\\\\\\\",NumV 2.7182817),(\\\\\\\"entries\\\\\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\\\\\"eq\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Literal (LambdaL \\\\\\\"y\\\\\\\" (FCall (Var \\\\\\\"not\\\\\\\") (FCall (FCall (Var \\\\\\\"ord\\\\\\\") (Var \\\\\\\"x\\\\\\\")) (Var \\\\\\\"y\\\\\\\"))))) (fromList [])),(\\\\\\\"eval\\\\\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\\\\\"exec\\\\\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\\\\\"factorial\\\\\\\",FuncV \\\\\\\"n\\\\\\\" (If (Var \\\\\\\"n\\\\\\\") (FCall (FCall (Var \\\\\\\"*\\\\\\\") (Var \\\\\\\"n\\\\\\\")) (FCall (Var \\\\\\\"factorial\\\\\\\") (FCall (FCall (Var \\\\\\\"-\\\\\\\") (Var \\\\\\\"n\\\\\\\")) (Literal (NumL 1.0))))) (Literal (NumL 1.0))) (fromList [])),(\\\\\\\"flip\\\\\\\",FuncV \\\\\\\"f\\\\\\\" (Literal (LambdaL \\\\\\\"x\\\\\\\" (Literal (LambdaL \\\\\\\"y\\\\\\\" (FCall (FCall (Var \\\\\\\"f\\\\\\\") (Var \\\\\\\"y\\\\\\\")) (Var \\\\\\\"x\\\\\\\")))))) (fromList [])),(\\\\\\\"get\\\\\\\",FuncV \\\\\\\"n\\\\\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\\\\\"gt\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Literal (LambdaL \\\\\\\"y\\\\\\\" (FCall (FCall (Var \\\\\\\"eq\\\\\\\") (Literal (NumL 1.0))) (FCall (FCall (Var \\\\\\\"ord\\\\\\\") (Var \\\\\\\"x\\\\\\\")) (Var \\\\\\\"y\\\\\\\"))))) (fromList [])),(\\\\\\\"head\\\\\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\\\\\"id\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Var \\\\\\\"x\\\\\\\") (fromList [])),(\\\\\\\"lt\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Literal (LambdaL \\\\\\\"y\\\\\\\" (FCall (FCall (Var \\\\\\\"eq\\\\\\\") (Literal (NumL (-1.0)))) (FCall (FCall (Var \\\\\\\"ord\\\\\\\") (Var \\\\\\\"x\\\\\\\")) (Var \\\\\\\"y\\\\\\\"))))) (fromList [])),(\\\\\\\"max\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Literal (LambdaL \\\\\\\"y\\\\\\\" (If (FCall (FCall (Var \\\\\\\"x\\\\\\\") (Var \\\\\\\">\\\\\\\")) (Var \\\\\\\"y\\\\\\\")) (Var \\\\\\\"x\\\\\\\") (Var \\\\\\\"y\\\\\\\")))) (fromList [])),(\\\\\\\"min\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Literal (LambdaL \\\\\\\"y\\\\\\\" (FCall (FCall (Var \\\\\\\"f\\\\\\\") (Var \\\\\\\"y\\\\\\\")) (Var \\\\\\\"x\\\\\\\")))) (fromList [(\\\\\\\"f\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Literal (LambdaL \\\\\\\"y\\\\\\\" (If (FCall (FCall (Var \\\\\\\"x\\\\\\\") (Var \\\\\\\">\\\\\\\")) (Var \\\\\\\"y\\\\\\\")) (Var \\\\\\\"x\\\\\\\") (Var \\\\\\\"y\\\\\\\")))) (fromList []))])),(\\\\\\\"mul\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\\\\\"not\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (If (Var \\\\\\\"x\\\\\\\") (Literal (BoolL False)) (Literal (BoolL True))) (fromList [])),(\\\\\\\"or\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Literal (LambdaL \\\\\\\"y\\\\\\\" (If (Var \\\\\\\"x\\\\\\\") (Var \\\\\\\"x\\\\\\\") (Var \\\\\\\"y\\\\\\\")))) (fromList [])),(\\\\\\\"ord\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\\\\\"pi\\\\\\\",NumV 3.1415927),(\\\\\\\"powN\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Literal (LambdaL \\\\\\\"n\\\\\\\" (If (Var \\\\\\\"n\\\\\\\") (FCall (FCall (Var \\\\\\\"*\\\\\\\") (Var \\\\\\\"x\\\\\\\")) (FCall (FCall (Var \\\\\\\"powN\\\\\\\") (Var \\\\\\\"x\\\\\\\")) (FCall (FCall (Var \\\\\\\"-\\\\\\\") (Var \\\\\\\"n\\\\\\\")) (Literal (NumL 1.0))))) (Literal (NumL 1.0))))) (fromList [])),(\\\\\\\"print\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (FCall (Var \\\\\\\"put\\\\\\\") (FCall (Var \\\\\\\"show\\\\\\\") (Var \\\\\\\"x\\\\\\\"))) (fromList [])),(\\\\\\\"printOrExec\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (If (FCall (FCall (Var \\\\\\\"==\\\\\\\") (FCall (Var \\\\\\\"typeof\\\\\\\") (Var \\\\\\\"x\\\\\\\"))) (Literal (ListL [Literal (CharL 'I'),Literal (CharL 'O')]))) (Var \\\\\\\"x\\\\\\\") (FCall (Var \\\\\\\"print\\\\\\\") (Var \\\\\\\"x\\\\\\\"))) (fromList [])),(\\\\\\\"printP\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (FCall (Var \\\\\\\"put\\\\\\\") (FCall (Var \\\\\\\"showP\\\\\\\") (Var \\\\\\\"x\\\\\\\"))) (fromList [])),(\\\\\\\"pureIO\\\\\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\\\\\"put\\\\\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\\\\\"readLine\\\\\\\",IOV ReadLine),(\\\\\\\"rem\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\\\\\"root\\\\\\\",FuncV \\\\\\\"r\\\\\\\" (Literal (LambdaL \\\\\\\"x\\\\\\\" (FCall (FCall (FCall (Var \\\\\\\"rootInner\\\\\\\") (Var \\\\\\\"r\\\\\\\")) (Var \\\\\\\"x\\\\\\\")) (FCall (Var \\\\\\\"round\\\\\\\") (FCall (FCall (Var \\\\\\\"/\\\\\\\") (Var \\\\\\\"x\\\\\\\")) (Literal (NumL 2.0))))))) (fromList [])),(\\\\\\\"rootInner\\\\\\\",FuncV \\\\\\\"r\\\\\\\" (Literal (LambdaL \\\\\\\"x\\\\\\\" (Literal (LambdaL \\\\\\\"guess\\\\\\\" (If (FCall (FCall (Var \\\\\\\"<\\\\\\\") (FCall (FCall (Var \\\\\\\"||\\\\\\\") (FCall (FCall (Var \\\\\\\"<\\\\\\\") (FCall (Var \\\\\\\"abs\\\\\\\") (FCall (FCall (Var \\\\\\\"-\\\\\\\") (FCall (FCall (Var \\\\\\\"powN\\\\\\\") (Var \\\\\\\"guess\\\\\\\")) (Var \\\\\\\"r\\\\\\\"))) (Var \\\\\\\"x\\\\\\\")))) (FCall (FCall (Var \\\\\\\"*\\\\\\\") (Literal (NumL 0.1))) (Var \\\\\\\"x\\\\\\\")))) (Var \\\\\\\"guess\\\\\\\"))) (Literal (NumL 1.0e-2))) (Var \\\\\\\"guess\\\\\\\") (FCall (FCall (FCall (Var \\\\\\\"rootInner\\\\\\\") (Var \\\\\\\"r\\\\\\\")) (Var \\\\\\\"x\\\\\\\")) (FCall (FCall (Var \\\\\\\"/\\\\\\\") (FCall (FCall (Var \\\\\\\"+\\\\\\\") (FCall (FCall (Var \\\\\\\"*\\\\\\\") (FCall (FCall (Var \\\\\\\"-\\\\\\\") (Var \\\\\\\"r\\\\\\\")) (Literal (NumL 1.0)))) (Var \\\\\\\"guess\\\\\\\"))) (FCall (FCall (Var \\\\\\\"/\\\\\\\") (Var \\\\\\\"x\\\\\\\")) (FCall (FCall (Var \\\\\\\"powN\\\\\\\") (Var \\\\\\\"guess\\\\\\\")) (FCall (FCall (Var \\\\\\\"-\\\\\\\") (Var \\\\\\\"r\\\\\\\")) (Literal (NumL 1.0))))))) (Literal (NumL 2.0))))))))) (fromList [])),(\\\\\\\"round\\\\\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\\\\\"set\\\\\\\",FuncV \\\\\\\"n\\\\\\\" (Literal (LambdaL \\\\\\\"x\\\\\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))))) (fromList [])),(\\\\\\\"showNum\\\\\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\\\\\"sqrt\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (FCall (FCall (Var \\\\\\\"root\\\\\\\") (Literal (NumL 2.0))) (Var \\\\\\\"x\\\\\\\")) (fromList [])),(\\\\\\\"subNum\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\\\\\"tail\\\\\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\\\\\"throw\\\\\\\",FuncV \\\\\\\"type\\\\\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\\\\\"toBool\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (FCall (Var \\\\\\\"f\\\\\\\") (FCall (Var \\\\\\\"g\\\\\\\") (Var \\\\\\\"x\\\\\\\"))) (fromList [(\\\\\\\"f\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (If (Var \\\\\\\"x\\\\\\\") (Literal (BoolL False)) (Literal (BoolL True))) (fromList [])),(\\\\\\\"g\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (If (Var \\\\\\\"x\\\\\\\") (Literal (BoolL False)) (Literal (BoolL True))) (fromList []))])),(\\\\\\\"typeof\\\\\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\\\\\"|>\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Literal (LambdaL \\\\\\\"f\\\\\\\" (FCall (Var \\\\\\\"f\\\\\\\") (Var \\\\\\\"x\\\\\\\")))) (fromList [])),(\\\\\\\"||\\\\\\\",FuncV \\\\\\\"x\\\\\\\" (Literal (LambdaL \\\\\\\"y\\\\\\\" (If (Var \\\\\\\"x\\\\\\\") (Var \\\\\\\"x\\\\\\\") (Var \\\\\\\"y\\\\\\\")))) (fromList [])),(\\\\\\\"\\\\\\\\176\\\\\\\",FuncV \\\\\\\"f\\\\\\\" (Literal (LambdaL \\\\\\\"g\\\\\\\" (Literal (LambdaL \\\\\\\"x\\\\\\\" (FCall (Var \\\\\\\"f\\\\\\\") (FCall (Var \\\\\\\"g\\\\\\\") (Var \\\\\\\"x\\\\\\\"))))))) (fromList [])),(\\\\\\\"\\\\\\\\8728\\\\\\\",FuncV \\\\\\\"f\\\\\\\" (Literal (LambdaL \\\\\\\"g\\\\\\\" (Literal (LambdaL \\\\\\\"x\\\\\\\" (FCall (Var \\\\\\\"f\\\\\\\") (FCall (Var \\\\\\\"g\\\\\\\") (Var \\\\\\\"x\\\\\\\"))))))) (fromList []))], getArgs = fromList [], getClosures = fromList [], getDests = [], getFClasses = fromList []}\\\"),(\\\"subNum\\\",FuncV \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"tail\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"throw\\\",FuncV \\\"type\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"toBool\\\",FuncV \\\"x\\\" (FCall (Var \\\"f\\\") (FCall (Var \\\"g\\\") (Var \\\"x\\\"))) (fromList [(\\\"f\\\",FuncV \\\"x\\\" (If (Var \\\"x\\\") (Literal (BoolL False)) (Literal (BoolL True))) (fromList [])),(\\\"g\\\",FuncV \\\"x\\\" (If (Var \\\"x\\\") (Literal (BoolL False)) (Literal (BoolL True))) (fromList []))])),(\\\"typeof\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"|>\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"f\\\" (FCall (Var \\\"f\\\") (Var \\\"x\\\")))) (fromList [])),(\\\"||\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (If (Var \\\"x\\\") (Var \\\"x\\\") (Var \\\"y\\\")))) (fromList [])),(\\\"\\\\176\\\",FuncV \\\"f\\\" (Literal (LambdaL \\\"g\\\" (Literal (LambdaL \\\"x\\\" (FCall (Var \\\"f\\\") (FCall (Var \\\"g\\\") (Var \\\"x\\\"))))))) (fromList [])),(\\\"\\\\8728\\\",FuncV \\\"f\\\" (Literal (LambdaL \\\"g\\\" (Literal (LambdaL \\\"x\\\" (FCall (Var \\\"f\\\") (FCall (Var \\\"g\\\") (Var \\\"x\\\"))))))) (fromList []))], getArgs = fromList [], getClosures = fromList [], getDests = [], getFClasses = fromList []}\"),(\"<=\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (Var \"not\") (FCall (FCall (Var \">\") (Var \"x\")) (Var \"y\"))))) (fromList [])),(\"==\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (Var \"not\") (FCall (FCall (Var \"ord\") (Var \"x\")) (Var \"y\"))))) (fromList [])),(\">\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (FCall (Var \"eq\") (Literal (NumL 1.0))) (FCall (FCall (Var \"ord\") (Var \"x\")) (Var \"y\"))))) (fromList [])),(\">=\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (Var \"not\") (FCall (FCall (Var \"<\") (Var \"x\")) (Var \"y\"))))) (fromList [])),(\">>\",FuncV \"f\" (Literal (LambdaL \"g\" (Literal (LambdaL \"x\" (FCall (Var \"f\") (FCall (Var \"g\") (Var \"x\"))))))) (fromList [])),(\"^\",FuncV \"x\" (Literal (LambdaL \"n\" (If (Var \"n\") (FCall (FCall (Var \"*\") (Var \"x\")) (FCall (FCall (Var \"powN\") (Var \"x\")) (FCall (FCall (Var \"-\") (Var \"n\")) (Literal (NumL 1.0))))) (Literal (NumL 1.0))))) (fromList [])),(\"abs\",FuncV \"x\" (If (FCall (FCall (Var \"<\") (Var \"x\")) (Literal (NumL 0.0))) (FCall (FCall (Var \"-\") (Literal (NumL 0.0))) (Var \"x\")) (Var \"x\")) (fromList [])),(\"addNum\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"and\",FuncV \"x\" (Literal (LambdaL \"y\" (If (Var \"x\") (Var \"y\") (Var \"x\")))) (fromList [])),(\"comp\",FuncV \"f\" (Literal (LambdaL \"g\" (Literal (LambdaL \"x\" (FCall (Var \"f\") (FCall (Var \"g\") (Var \"x\"))))))) (fromList [])),(\"compIO\",FuncV \"io\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"cons\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"const\",FuncV \"x\" (Literal (LambdaL \"y\" (Var \"x\"))) (fromList [])),(\"debugRaw\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"debugState\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"div\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"divBy\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (FCall (Var \"f\") (Var \"y\")) (Var \"x\")))) (fromList [(\"f\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList []))])),(\"e\",NumV 2.7182817),(\"entries\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"eq\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (Var \"not\") (FCall (FCall (Var \"ord\") (Var \"x\")) (Var \"y\"))))) (fromList [])),(\"eval\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"exec\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"factorial\",FuncV \"n\" (If (Var \"n\") (FCall (FCall (Var \"*\") (Var \"n\")) (FCall (Var \"factorial\") (FCall (FCall (Var \"-\") (Var \"n\")) (Literal (NumL 1.0))))) (Literal (NumL 1.0))) (fromList [])),(\"flatMap\",FuncV \"f\" (Literal (LambdaL \"l\" (If (Var \"l\") (Let (DestDef \"HT\" [\"x\",\"xs\"] (Var \"l\")) (FCall (FCall (Var \"+\") (FCall (Var \"f\") (Var \"x\"))) (FCall (FCall (Var \"flatMap\") (Var \"f\")) (Var \"xs\")))) (Literal (ListL []))))) (fromList [])),(\"flip\",FuncV \"f\" (Literal (LambdaL \"x\" (Literal (LambdaL \"y\" (FCall (FCall (Var \"f\") (Var \"y\")) (Var \"x\")))))) (fromList [])),(\"gcd\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (FCall (Var \"gcd_\") (FCall (Var \"abs\") (Var \"x\"))) (FCall (Var \"abs\") (Var \"y\"))))) (fromList [])),(\"gcd_\",FuncV \"x\" (Literal (LambdaL \"y\" (If (Var \"y\") (FCall (FCall (Var \"gcd_\") (Var \"y\")) (FCall (FCall (Var \"rem\") (Var \"x\")) (Var \"y\"))) (Var \"x\")))) (fromList [])),(\"get\",FuncV \"n\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"gt\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (FCall (Var \"eq\") (Literal (NumL 1.0))) (FCall (FCall (Var \"ord\") (Var \"x\")) (Var \"y\"))))) (fromList [])),(\"head\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"id\",FuncV \"x\" (Var \"x\") (fromList [])),(\"lt\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (FCall (Var \"eq\") (Literal (NumL (-1.0)))) (FCall (FCall (Var \"ord\") (Var \"x\")) (Var \"y\"))))) (fromList [])),(\"mapI\",FuncV \"f\" (Literal (LambdaL \"l\" (FCall (FCall (FCall (Var \"mapIS\") (Var \"f\")) (Var \"l\")) (Literal (NumL 0.0))))) (fromList [])),(\"mapIS\",FuncV \"f\" (Literal (LambdaL \"l\" (Literal (LambdaL \"i\" (If (Var \"l\") (Let (DestDef \"HT\" [\"x\",\"xs\"] (Var \"l\")) (FCall (FCall (Var \"cons\") (FCall (FCall (Var \"f\") (Var \"x\")) (Var \"i\"))) (FCall (FCall (FCall (Var \"mapIS\") (Var \"f\")) (Var \"xs\")) (FCall (FCall (Var \"+\") (Var \"i\")) (Literal (NumL 1.0)))))) (Literal (ListL []))))))) (fromList [])),(\"max\",FuncV \"x\" (Literal (LambdaL \"y\" (If (FCall (FCall (Var \"x\") (Var \">\")) (Var \"y\")) (Var \"x\") (Var \"y\")))) (fromList [])),(\"min\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (FCall (Var \"f\") (Var \"y\")) (Var \"x\")))) (fromList [(\"f\",FuncV \"x\" (Literal (LambdaL \"y\" (If (FCall (FCall (Var \"x\") (Var \">\")) (Var \"y\")) (Var \"x\") (Var \"y\")))) (fromList []))])),(\"mul\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"not\",FuncV \"x\" (If (Var \"x\") (Literal (BoolL False)) (Literal (BoolL True))) (fromList [])),(\"or\",FuncV \"x\" (Literal (LambdaL \"y\" (If (Var \"x\") (Var \"x\") (Var \"y\")))) (fromList [])),(\"ord\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"pi\",NumV 3.1415927),(\"powN\",FuncV \"x\" (Literal (LambdaL \"n\" (If (Var \"n\") (FCall (FCall (Var \"*\") (Var \"x\")) (FCall (FCall (Var \"powN\") (Var \"x\")) (FCall (FCall (Var \"-\") (Var \"n\")) (Literal (NumL 1.0))))) (Literal (NumL 1.0))))) (fromList [])),(\"print\",FuncV \"x\" (FCall (Var \"put\") (FCall (Var \"show\") (Var \"x\"))) (fromList [])),(\"printOrExec\",FuncV \"x\" (If (FCall (FCall (Var \"==\") (FCall (Var \"typeof\") (Var \"x\"))) (Literal (ListL [Literal (CharL 'I'),Literal (CharL 'O')]))) (Var \"x\") (FCall (Var \"print\") (Var \"x\"))) (fromList [])),(\"printP\",FuncV \"x\" (FCall (Var \"put\") (FCall (Var \"showP\") (Var \"x\"))) (fromList [])),(\"pureIO\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"put\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"range\",FuncV \"s\" (Literal (LambdaL \"e\" (If (FCall (FCall (Var \">=\") (Var \"s\")) (Var \"e\")) (Literal (ListL [])) (FCall (FCall (Var \"cons\") (Var \"s\")) (FCall (FCall (Var \"range\") (FCall (FCall (Var \"+\") (Var \"s\")) (Literal (NumL 1.0)))) (Var \"e\")))))) (fromList [])),(\"rangeI\",FuncV \"s\" (Literal (LambdaL \"e\" (FCall (FCall (Var \"range\") (Var \"s\")) (FCall (FCall (Var \"+\") (Var \"e\")) (Literal (NumL 1.0)))))) (fromList [])),(\"rangeStep\",FuncV \"s\" (Literal (LambdaL \"e\" (Literal (LambdaL \"step\" (If (FCall (FCall (Var \">=\") (Var \"s\")) (Var \"e\")) (Literal (ListL [])) (FCall (FCall (Var \"cons\") (Var \"s\")) (FCall (FCall (FCall (Var \"rangeStep\") (FCall (FCall (Var \"+\") (Var \"s\")) (Var \"step\"))) (Var \"e\")) (Var \"step\")))))))) (fromList [])),(\"readLine\",IOV ReadLine),(\"rem\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"repeat\",FuncV \"x\" (Literal (LambdaL \"i\" (If (FCall (FCall (Var \"<=\") (Var \"i\")) (Literal (NumL 0.0))) (Literal (ListL [])) (FCall (FCall (Var \":\") (Var \"x\")) (FCall (FCall (Var \"repeat\") (Var \"x\")) (FCall (FCall (Var \"-\") (Var \"i\")) (Literal (NumL 1.0)))))))) (fromList [])),(\"root\",FuncV \"r\" (Literal (LambdaL \"x\" (FCall (FCall (FCall (Var \"rootInner\") (Var \"r\")) (Var \"x\")) (FCall (Var \"round\") (FCall (FCall (Var \"/\") (Var \"x\")) (Literal (NumL 2.0))))))) (fromList [])),(\"rootInner\",FuncV \"r\" (Literal (LambdaL \"x\" (Literal (LambdaL \"guess\" (If (FCall (FCall (Var \"<\") (FCall (FCall (Var \"||\") (FCall (FCall (Var \"<\") (FCall (Var \"abs\") (FCall (FCall (Var \"-\") (FCall (FCall (Var \"powN\") (Var \"guess\")) (Var \"r\"))) (Var \"x\")))) (FCall (FCall (Var \"*\") (Literal (NumL 0.1))) (Var \"x\")))) (Var \"guess\"))) (Literal (NumL 1.0e-2))) (Var \"guess\") (FCall (FCall (FCall (Var \"rootInner\") (Var \"r\")) (Var \"x\")) (FCall (FCall (Var \"/\") (FCall (FCall (Var \"+\") (FCall (FCall (Var \"*\") (FCall (FCall (Var \"-\") (Var \"r\")) (Literal (NumL 1.0)))) (Var \"guess\"))) (FCall (FCall (Var \"/\") (Var \"x\")) (FCall (FCall (Var \"powN\") (Var \"guess\")) (FCall (FCall (Var \"-\") (Var \"r\")) (Literal (NumL 1.0))))))) (Literal (NumL 2.0))))))))) (fromList [])),(\"round\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"set\",FuncV \"n\" (Literal (LambdaL \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))))) (fromList [])),(\"showNum\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"sqrt\",FuncV \"x\" (FCall (FCall (Var \"root\") (Literal (NumL 2.0))) (Var \"x\")) (fromList [])),(\"subBy\",ExceptionV \"State\" \"Value sub does not exist in the current state! \\n\\nCurrent Args were: fromList []\\n\\nClosures were: fromList []\\n\\nThe Full State was: RTState {getVals = fromList [(\\\"!=\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (Var \\\"not\\\") (FCall (FCall (Var \\\"==\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))))) (fromList [])),(\\\"&&\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (If (Var \\\"x\\\") (Var \\\"y\\\") (Var \\\"x\\\")))) (fromList [])),(\\\"*\\\",FuncV \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"/\\\",FuncV \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"/=\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (Var \\\"not\\\") (FCall (FCall (Var \\\"==\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))))) (fromList [])),(\\\"<\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (FCall (Var \\\"eq\\\") (Literal (NumL (-1.0)))) (FCall (FCall (Var \\\"ord\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))))) (fromList [])),(\\\"<=\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (Var \\\"not\\\") (FCall (FCall (Var \\\">\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))))) (fromList [])),(\\\"==\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (Var \\\"not\\\") (FCall (FCall (Var \\\"ord\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))))) (fromList [])),(\\\">\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (FCall (Var \\\"eq\\\") (Literal (NumL 1.0))) (FCall (FCall (Var \\\"ord\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))))) (fromList [])),(\\\">=\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (Var \\\"not\\\") (FCall (FCall (Var \\\"<\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))))) (fromList [])),(\\\">>\\\",FuncV \\\"f\\\" (Literal (LambdaL \\\"g\\\" (Literal (LambdaL \\\"x\\\" (FCall (Var \\\"f\\\") (FCall (Var \\\"g\\\") (Var \\\"x\\\"))))))) (fromList [])),(\\\"^\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"n\\\" (If (Var \\\"n\\\") (FCall (FCall (Var \\\"*\\\") (Var \\\"x\\\")) (FCall (FCall (Var \\\"powN\\\") (Var \\\"x\\\")) (FCall (FCall (Var \\\"-\\\") (Var \\\"n\\\")) (Literal (NumL 1.0))))) (Literal (NumL 1.0))))) (fromList [])),(\\\"addNum\\\",FuncV \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"and\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (If (Var \\\"x\\\") (Var \\\"y\\\") (Var \\\"x\\\")))) (fromList [])),(\\\"comp\\\",FuncV \\\"f\\\" (Literal (LambdaL \\\"g\\\" (Literal (LambdaL \\\"x\\\" (FCall (Var \\\"f\\\") (FCall (Var \\\"g\\\") (Var \\\"x\\\"))))))) (fromList [])),(\\\"compIO\\\",FuncV \\\"io\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"cons\\\",FuncV \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"const\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (Var \\\"x\\\"))) (fromList [])),(\\\"debugRaw\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"debugState\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"div\\\",FuncV \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"divBy\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (FCall (Var \\\"f\\\") (Var \\\"y\\\")) (Var \\\"x\\\")))) (fromList [(\\\"f\\\",FuncV \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList []))])),(\\\"e\\\",NumV 2.7182817),(\\\"entries\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"eq\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (Var \\\"not\\\") (FCall (FCall (Var \\\"ord\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))))) (fromList [])),(\\\"eval\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"exec\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"factorial\\\",FuncV \\\"n\\\" (If (Var \\\"n\\\") (FCall (FCall (Var \\\"*\\\") (Var \\\"n\\\")) (FCall (Var \\\"factorial\\\") (FCall (FCall (Var \\\"-\\\") (Var \\\"n\\\")) (Literal (NumL 1.0))))) (Literal (NumL 1.0))) (fromList [])),(\\\"flip\\\",FuncV \\\"f\\\" (Literal (LambdaL \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (FCall (Var \\\"f\\\") (Var \\\"y\\\")) (Var \\\"x\\\")))))) (fromList [])),(\\\"get\\\",FuncV \\\"n\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"gt\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (FCall (Var \\\"eq\\\") (Literal (NumL 1.0))) (FCall (FCall (Var \\\"ord\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))))) (fromList [])),(\\\"head\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"id\\\",FuncV \\\"x\\\" (Var \\\"x\\\") (fromList [])),(\\\"lt\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (FCall (Var \\\"eq\\\") (Literal (NumL (-1.0)))) (FCall (FCall (Var \\\"ord\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))))) (fromList [])),(\\\"max\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (If (FCall (FCall (Var \\\"x\\\") (Var \\\">\\\")) (Var \\\"y\\\")) (Var \\\"x\\\") (Var \\\"y\\\")))) (fromList [])),(\\\"min\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (FCall (Var \\\"f\\\") (Var \\\"y\\\")) (Var \\\"x\\\")))) (fromList [(\\\"f\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (If (FCall (FCall (Var \\\"x\\\") (Var \\\">\\\")) (Var \\\"y\\\")) (Var \\\"x\\\") (Var \\\"y\\\")))) (fromList []))])),(\\\"mul\\\",FuncV \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"not\\\",FuncV \\\"x\\\" (If (Var \\\"x\\\") (Literal (BoolL False)) (Literal (BoolL True))) (fromList [])),(\\\"or\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (If (Var \\\"x\\\") (Var \\\"x\\\") (Var \\\"y\\\")))) (fromList [])),(\\\"ord\\\",FuncV \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"pi\\\",NumV 3.1415927),(\\\"powN\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"n\\\" (If (Var \\\"n\\\") (FCall (FCall (Var \\\"*\\\") (Var \\\"x\\\")) (FCall (FCall (Var \\\"powN\\\") (Var \\\"x\\\")) (FCall (FCall (Var \\\"-\\\") (Var \\\"n\\\")) (Literal (NumL 1.0))))) (Literal (NumL 1.0))))) (fromList [])),(\\\"print\\\",FuncV \\\"x\\\" (FCall (Var \\\"put\\\") (FCall (Var \\\"show\\\") (Var \\\"x\\\"))) (fromList [])),(\\\"printOrExec\\\",FuncV \\\"x\\\" (If (FCall (FCall (Var \\\"==\\\") (FCall (Var \\\"typeof\\\") (Var \\\"x\\\"))) (Literal (ListL [Literal (CharL 'I'),Literal (CharL 'O')]))) (Var \\\"x\\\") (FCall (Var \\\"print\\\") (Var \\\"x\\\"))) (fromList [])),(\\\"printP\\\",FuncV \\\"x\\\" (FCall (Var \\\"put\\\") (FCall (Var \\\"showP\\\") (Var \\\"x\\\"))) (fromList [])),(\\\"pureIO\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"put\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"readLine\\\",IOV ReadLine),(\\\"rem\\\",FuncV \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"root\\\",FuncV \\\"r\\\" (Literal (LambdaL \\\"x\\\" (FCall (FCall (FCall (Var \\\"rootInner\\\") (Var \\\"r\\\")) (Var \\\"x\\\")) (FCall (Var \\\"round\\\") (FCall (FCall (Var \\\"/\\\") (Var \\\"x\\\")) (Literal (NumL 2.0))))))) (fromList [])),(\\\"rootInner\\\",FuncV \\\"r\\\" (Literal (LambdaL \\\"x\\\" (Literal (LambdaL \\\"guess\\\" (If (FCall (FCall (Var \\\"<\\\") (FCall (FCall (Var \\\"||\\\") (FCall (FCall (Var \\\"<\\\") (FCall (Var \\\"abs\\\") (FCall (FCall (Var \\\"-\\\") (FCall (FCall (Var \\\"powN\\\") (Var \\\"guess\\\")) (Var \\\"r\\\"))) (Var \\\"x\\\")))) (FCall (FCall (Var \\\"*\\\") (Literal (NumL 0.1))) (Var \\\"x\\\")))) (Var \\\"guess\\\"))) (Literal (NumL 1.0e-2))) (Var \\\"guess\\\") (FCall (FCall (FCall (Var \\\"rootInner\\\") (Var \\\"r\\\")) (Var \\\"x\\\")) (FCall (FCall (Var \\\"/\\\") (FCall (FCall (Var \\\"+\\\") (FCall (FCall (Var \\\"*\\\") (FCall (FCall (Var \\\"-\\\") (Var \\\"r\\\")) (Literal (NumL 1.0)))) (Var \\\"guess\\\"))) (FCall (FCall (Var \\\"/\\\") (Var \\\"x\\\")) (FCall (FCall (Var \\\"powN\\\") (Var \\\"guess\\\")) (FCall (FCall (Var \\\"-\\\") (Var \\\"r\\\")) (Literal (NumL 1.0))))))) (Literal (NumL 2.0))))))))) (fromList [])),(\\\"round\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"set\\\",FuncV \\\"n\\\" (Literal (LambdaL \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))))) (fromList [])),(\\\"showNum\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"sqrt\\\",FuncV \\\"x\\\" (FCall (FCall (Var \\\"root\\\") (Literal (NumL 2.0))) (Var \\\"x\\\")) (fromList [])),(\\\"subNum\\\",FuncV \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"tail\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"throw\\\",FuncV \\\"type\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"toBool\\\",FuncV \\\"x\\\" (FCall (Var \\\"f\\\") (FCall (Var \\\"g\\\") (Var \\\"x\\\"))) (fromList [(\\\"f\\\",FuncV \\\"x\\\" (If (Var \\\"x\\\") (Literal (BoolL False)) (Literal (BoolL True))) (fromList [])),(\\\"g\\\",FuncV \\\"x\\\" (If (Var \\\"x\\\") (Literal (BoolL False)) (Literal (BoolL True))) (fromList []))])),(\\\"typeof\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"|>\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"f\\\" (FCall (Var \\\"f\\\") (Var \\\"x\\\")))) (fromList [])),(\\\"||\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (If (Var \\\"x\\\") (Var \\\"x\\\") (Var \\\"y\\\")))) (fromList [])),(\\\"\\\\176\\\",FuncV \\\"f\\\" (Literal (LambdaL \\\"g\\\" (Literal (LambdaL \\\"x\\\" (FCall (Var \\\"f\\\") (FCall (Var \\\"g\\\") (Var \\\"x\\\"))))))) (fromList [])),(\\\"\\\\8728\\\",FuncV \\\"f\\\" (Literal (LambdaL \\\"g\\\" (Literal (LambdaL \\\"x\\\" (FCall (Var \\\"f\\\") (FCall (Var \\\"g\\\") (Var \\\"x\\\"))))))) (fromList []))], getArgs = fromList [], getClosures = fromList [], getDests = [], getFClasses = fromList []}\"),(\"subNum\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"tail\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"throw\",FuncV \"type\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"toBool\",FuncV \"x\" (FCall (Var \"f\") (FCall (Var \"g\") (Var \"x\"))) (fromList [(\"f\",FuncV \"x\" (If (Var \"x\") (Literal (BoolL False)) (Literal (BoolL True))) (fromList [])),(\"g\",FuncV \"x\" (If (Var \"x\") (Literal (BoolL False)) (Literal (BoolL True))) (fromList []))])),(\"typeof\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"|>\",FuncV \"x\" (Literal (LambdaL \"f\" (FCall (Var \"f\") (Var \"x\")))) (fromList [])),(\"||\",FuncV \"x\" (Literal (LambdaL \"y\" (If (Var \"x\") (Var \"x\") (Var \"y\")))) (fromList [])),(\"\\176\",FuncV \"f\" (Literal (LambdaL \"g\" (Literal (LambdaL \"x\" (FCall (Var \"f\") (FCall (Var \"g\") (Var \"x\"))))))) (fromList [])),(\"\\8728\",FuncV \"f\" (Literal (LambdaL \"g\" (Literal (LambdaL \"x\" (FCall (Var \"f\") (FCall (Var \"g\") (Var \"x\"))))))) (fromList []))], getArgs = fromList [], getClosures = fromList [], getDests = [], getFClasses = fromList []}"),("!=",FuncV "x" (Literal (LambdaL "y" (FCall (Var "not") (FCall (FCall (Var "==") (Var "x")) (Var "y"))))) (fromList [])),("&&",FuncV "x" (Literal (LambdaL "y" (If (Var "x") (Var "y") (Var "x")))) (fromList [])),("*",FuncV "x" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),("/",FuncV "x" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),("/=",FuncV "x" (Literal (LambdaL "y" (FCall (Var "not") (FCall (FCall (Var "==") (Var "x")) (Var "y"))))) (fromList [])),(":",FuncV "x" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),("::",FuncV "s" (Literal (LambdaL "e" (If (FCall (FCall (Var ">=") (Var "s")) (Var "e")) (Literal (ListL [])) (FCall (FCall (Var "cons") (Var "s")) (FCall (FCall (Var "range") (FCall (FCall (Var "+") (Var "s")) (Literal (NumL 1.0)))) (Var "e")))))) (fromList [])),("::+",FuncV "s" (Literal (LambdaL "e" (FCall (FCall (Var "range") (Var "s")) (FCall (FCall (Var "+") (Var "e")) (Literal (NumL 1.0)))))) (fromList [])),("<",FuncV "x" (Literal (LambdaL "y" (FCall (FCall (Var "eq") (Literal (NumL (-1.0)))) (FCall (FCall (Var "ord") (Var "x")) (Var "y"))))) (fromList [])),("<$>",ExceptionV "State" "Value map does not exist in the current state! \n\nCurrent Args were: fromList []\n\nClosures were: fromList []\n\nThe Full State was: RTState {getVals = fromList [(\"!=\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (Var \"not\") (FCall (FCall (Var \"==\") (Var \"x\")) (Var \"y\"))))) (fromList [])),(\"&&\",FuncV \"x\" (Literal (LambdaL \"y\" (If (Var \"x\") (Var \"y\") (Var \"x\")))) (fromList [])),(\"*\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"/\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"/=\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (Var \"not\") (FCall (FCall (Var \"==\") (Var \"x\")) (Var \"y\"))))) (fromList [])),(\"<\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (FCall (Var \"eq\") (Literal (NumL (-1.0)))) (FCall (FCall (Var \"ord\") (Var \"x\")) (Var \"y\"))))) (fromList [])),(\"<=\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (Var \"not\") (FCall (FCall (Var \">\") (Var \"x\")) (Var \"y\"))))) (fromList [])),(\"==\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (Var \"not\") (FCall (FCall (Var \"ord\") (Var \"x\")) (Var \"y\"))))) (fromList [])),(\">\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (FCall (Var \"eq\") (Literal (NumL 1.0))) (FCall (FCall (Var \"ord\") (Var \"x\")) (Var \"y\"))))) (fromList [])),(\">=\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (Var \"not\") (FCall (FCall (Var \"<\") (Var \"x\")) (Var \"y\"))))) (fromList [])),(\">>\",FuncV \"f\" (Literal (LambdaL \"g\" (Literal (LambdaL \"x\" (FCall (Var \"f\") (FCall (Var \"g\") (Var \"x\"))))))) (fromList [])),(\"^\",FuncV \"x\" (Literal (LambdaL \"n\" (If (Var \"n\") (FCall (FCall (Var \"*\") (Var \"x\")) (FCall (FCall (Var \"powN\") (Var \"x\")) (FCall (FCall (Var \"-\") (Var \"n\")) (Literal (NumL 1.0))))) (Literal (NumL 1.0))))) (fromList [])),(\"abs\",FuncV \"x\" (If (FCall (FCall (Var \"<\") (Var \"x\")) (Literal (NumL 0.0))) (FCall (FCall (Var \"-\") (Literal (NumL 0.0))) (Var \"x\")) (Var \"x\")) (fromList [])),(\"addNum\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"and\",FuncV \"x\" (Literal (LambdaL \"y\" (If (Var \"x\") (Var \"y\") (Var \"x\")))) (fromList [])),(\"comp\",FuncV \"f\" (Literal (LambdaL \"g\" (Literal (LambdaL \"x\" (FCall (Var \"f\") (FCall (Var \"g\") (Var \"x\"))))))) (fromList [])),(\"compIO\",FuncV \"io\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"cons\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"const\",FuncV \"x\" (Literal (LambdaL \"y\" (Var \"x\"))) (fromList [])),(\"debugRaw\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"debugState\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"div\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"divBy\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (FCall (Var \"f\") (Var \"y\")) (Var \"x\")))) (fromList [(\"f\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList []))])),(\"e\",NumV 2.7182817),(\"entries\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"eq\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (Var \"not\") (FCall (FCall (Var \"ord\") (Var \"x\")) (Var \"y\"))))) (fromList [])),(\"eval\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"exec\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"factorial\",FuncV \"n\" (If (Var \"n\") (FCall (FCall (Var \"*\") (Var \"n\")) (FCall (Var \"factorial\") (FCall (FCall (Var \"-\") (Var \"n\")) (Literal (NumL 1.0))))) (Literal (NumL 1.0))) (fromList [])),(\"flatMap\",FuncV \"f\" (Literal (LambdaL \"l\" (If (Var \"l\") (Let (DestDef \"HT\" [\"x\",\"xs\"] (Var \"l\")) (FCall (FCall (Var \"+\") (FCall (Var \"f\") (Var \"x\"))) (FCall (FCall (Var \"flatMap\") (Var \"f\")) (Var \"xs\")))) (Literal (ListL []))))) (fromList [])),(\"flip\",FuncV \"f\" (Literal (LambdaL \"x\" (Literal (LambdaL \"y\" (FCall (FCall (Var \"f\") (Var \"y\")) (Var \"x\")))))) (fromList [])),(\"gcd\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (FCall (Var \"gcd_\") (FCall (Var \"abs\") (Var \"x\"))) (FCall (Var \"abs\") (Var \"y\"))))) (fromList [])),(\"gcd_\",FuncV \"x\" (Literal (LambdaL \"y\" (If (Var \"y\") (FCall (FCall (Var \"gcd_\") (Var \"y\")) (FCall (FCall (Var \"rem\") (Var \"x\")) (Var \"y\"))) (Var \"x\")))) (fromList [])),(\"get\",FuncV \"n\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"gt\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (FCall (Var \"eq\") (Literal (NumL 1.0))) (FCall (FCall (Var \"ord\") (Var \"x\")) (Var \"y\"))))) (fromList [])),(\"head\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"id\",FuncV \"x\" (Var \"x\") (fromList [])),(\"lt\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (FCall (Var \"eq\") (Literal (NumL (-1.0)))) (FCall (FCall (Var \"ord\") (Var \"x\")) (Var \"y\"))))) (fromList [])),(\"mapI\",FuncV \"f\" (Literal (LambdaL \"l\" (FCall (FCall (FCall (Var \"mapIS\") (Var \"f\")) (Var \"l\")) (Literal (NumL 0.0))))) (fromList [])),(\"mapIS\",FuncV \"f\" (Literal (LambdaL \"l\" (Literal (LambdaL \"i\" (If (Var \"l\") (Let (DestDef \"HT\" [\"x\",\"xs\"] (Var \"l\")) (FCall (FCall (Var \"cons\") (FCall (FCall (Var \"f\") (Var \"x\")) (Var \"i\"))) (FCall (FCall (FCall (Var \"mapIS\") (Var \"f\")) (Var \"xs\")) (FCall (FCall (Var \"+\") (Var \"i\")) (Literal (NumL 1.0)))))) (Literal (ListL []))))))) (fromList [])),(\"max\",FuncV \"x\" (Literal (LambdaL \"y\" (If (FCall (FCall (Var \"x\") (Var \">\")) (Var \"y\")) (Var \"x\") (Var \"y\")))) (fromList [])),(\"min\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (FCall (Var \"f\") (Var \"y\")) (Var \"x\")))) (fromList [(\"f\",FuncV \"x\" (Literal (LambdaL \"y\" (If (FCall (FCall (Var \"x\") (Var \">\")) (Var \"y\")) (Var \"x\") (Var \"y\")))) (fromList []))])),(\"mul\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"not\",FuncV \"x\" (If (Var \"x\") (Literal (BoolL False)) (Literal (BoolL True))) (fromList [])),(\"or\",FuncV \"x\" (Literal (LambdaL \"y\" (If (Var \"x\") (Var \"x\") (Var \"y\")))) (fromList [])),(\"ord\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"pi\",NumV 3.1415927),(\"powN\",FuncV \"x\" (Literal (LambdaL \"n\" (If (Var \"n\") (FCall (FCall (Var \"*\") (Var \"x\")) (FCall (FCall (Var \"powN\") (Var \"x\")) (FCall (FCall (Var \"-\") (Var \"n\")) (Literal (NumL 1.0))))) (Literal (NumL 1.0))))) (fromList [])),(\"print\",FuncV \"x\" (FCall (Var \"put\") (FCall (Var \"show\") (Var \"x\"))) (fromList [])),(\"printOrExec\",FuncV \"x\" (If (FCall (FCall (Var \"==\") (FCall (Var \"typeof\") (Var \"x\"))) (Literal (ListL [Literal (CharL 'I'),Literal (CharL 'O')]))) (Var \"x\") (FCall (Var \"print\") (Var \"x\"))) (fromList [])),(\"printP\",FuncV \"x\" (FCall (Var \"put\") (FCall (Var \"showP\") (Var \"x\"))) (fromList [])),(\"pureIO\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"put\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"readLine\",IOV ReadLine),(\"rem\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"root\",FuncV \"r\" (Literal (LambdaL \"x\" (FCall (FCall (FCall (Var \"rootInner\") (Var \"r\")) (Var \"x\")) (FCall (Var \"round\") (FCall (FCall (Var \"/\") (Var \"x\")) (Literal (NumL 2.0))))))) (fromList [])),(\"rootInner\",FuncV \"r\" (Literal (LambdaL \"x\" (Literal (LambdaL \"guess\" (If (FCall (FCall (Var \"<\") (FCall (FCall (Var \"||\") (FCall (FCall (Var \"<\") (FCall (Var \"abs\") (FCall (FCall (Var \"-\") (FCall (FCall (Var \"powN\") (Var \"guess\")) (Var \"r\"))) (Var \"x\")))) (FCall (FCall (Var \"*\") (Literal (NumL 0.1))) (Var \"x\")))) (Var \"guess\"))) (Literal (NumL 1.0e-2))) (Var \"guess\") (FCall (FCall (FCall (Var \"rootInner\") (Var \"r\")) (Var \"x\")) (FCall (FCall (Var \"/\") (FCall (FCall (Var \"+\") (FCall (FCall (Var \"*\") (FCall (FCall (Var \"-\") (Var \"r\")) (Literal (NumL 1.0)))) (Var \"guess\"))) (FCall (FCall (Var \"/\") (Var \"x\")) (FCall (FCall (Var \"powN\") (Var \"guess\")) (FCall (FCall (Var \"-\") (Var \"r\")) (Literal (NumL 1.0))))))) (Literal (NumL 2.0))))))))) (fromList [])),(\"round\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"set\",FuncV \"n\" (Literal (LambdaL \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))))) (fromList [])),(\"showNum\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"sqrt\",FuncV \"x\" (FCall (FCall (Var \"root\") (Literal (NumL 2.0))) (Var \"x\")) (fromList [])),(\"subBy\",ExceptionV \"State\" \"Value sub does not exist in the current state! \\n\\nCurrent Args were: fromList []\\n\\nClosures were: fromList []\\n\\nThe Full State was: RTState {getVals = fromList [(\\\"!=\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (Var \\\"not\\\") (FCall (FCall (Var \\\"==\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))))) (fromList [])),(\\\"&&\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (If (Var \\\"x\\\") (Var \\\"y\\\") (Var \\\"x\\\")))) (fromList [])),(\\\"*\\\",FuncV \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"/\\\",FuncV \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"/=\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (Var \\\"not\\\") (FCall (FCall (Var \\\"==\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))))) (fromList [])),(\\\"<\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (FCall (Var \\\"eq\\\") (Literal (NumL (-1.0)))) (FCall (FCall (Var \\\"ord\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))))) (fromList [])),(\\\"<=\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (Var \\\"not\\\") (FCall (FCall (Var \\\">\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))))) (fromList [])),(\\\"==\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (Var \\\"not\\\") (FCall (FCall (Var \\\"ord\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))))) (fromList [])),(\\\">\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (FCall (Var \\\"eq\\\") (Literal (NumL 1.0))) (FCall (FCall (Var \\\"ord\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))))) (fromList [])),(\\\">=\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (Var \\\"not\\\") (FCall (FCall (Var \\\"<\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))))) (fromList [])),(\\\">>\\\",FuncV \\\"f\\\" (Literal (LambdaL \\\"g\\\" (Literal (LambdaL \\\"x\\\" (FCall (Var \\\"f\\\") (FCall (Var \\\"g\\\") (Var \\\"x\\\"))))))) (fromList [])),(\\\"^\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"n\\\" (If (Var \\\"n\\\") (FCall (FCall (Var \\\"*\\\") (Var \\\"x\\\")) (FCall (FCall (Var \\\"powN\\\") (Var \\\"x\\\")) (FCall (FCall (Var \\\"-\\\") (Var \\\"n\\\")) (Literal (NumL 1.0))))) (Literal (NumL 1.0))))) (fromList [])),(\\\"addNum\\\",FuncV \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"and\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (If (Var \\\"x\\\") (Var \\\"y\\\") (Var \\\"x\\\")))) (fromList [])),(\\\"comp\\\",FuncV \\\"f\\\" (Literal (LambdaL \\\"g\\\" (Literal (LambdaL \\\"x\\\" (FCall (Var \\\"f\\\") (FCall (Var \\\"g\\\") (Var \\\"x\\\"))))))) (fromList [])),(\\\"compIO\\\",FuncV \\\"io\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"cons\\\",FuncV \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"const\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (Var \\\"x\\\"))) (fromList [])),(\\\"debugRaw\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"debugState\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"div\\\",FuncV \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"divBy\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (FCall (Var \\\"f\\\") (Var \\\"y\\\")) (Var \\\"x\\\")))) (fromList [(\\\"f\\\",FuncV \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList []))])),(\\\"e\\\",NumV 2.7182817),(\\\"entries\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"eq\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (Var \\\"not\\\") (FCall (FCall (Var \\\"ord\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))))) (fromList [])),(\\\"eval\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"exec\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"factorial\\\",FuncV \\\"n\\\" (If (Var \\\"n\\\") (FCall (FCall (Var \\\"*\\\") (Var \\\"n\\\")) (FCall (Var \\\"factorial\\\") (FCall (FCall (Var \\\"-\\\") (Var \\\"n\\\")) (Literal (NumL 1.0))))) (Literal (NumL 1.0))) (fromList [])),(\\\"flip\\\",FuncV \\\"f\\\" (Literal (LambdaL \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (FCall (Var \\\"f\\\") (Var \\\"y\\\")) (Var \\\"x\\\")))))) (fromList [])),(\\\"get\\\",FuncV \\\"n\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"gt\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (FCall (Var \\\"eq\\\") (Literal (NumL 1.0))) (FCall (FCall (Var \\\"ord\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))))) (fromList [])),(\\\"head\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"id\\\",FuncV \\\"x\\\" (Var \\\"x\\\") (fromList [])),(\\\"lt\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (FCall (Var \\\"eq\\\") (Literal (NumL (-1.0)))) (FCall (FCall (Var \\\"ord\\\") (Var \\\"x\\\")) (Var \\\"y\\\"))))) (fromList [])),(\\\"max\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (If (FCall (FCall (Var \\\"x\\\") (Var \\\">\\\")) (Var \\\"y\\\")) (Var \\\"x\\\") (Var \\\"y\\\")))) (fromList [])),(\\\"min\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (FCall (FCall (Var \\\"f\\\") (Var \\\"y\\\")) (Var \\\"x\\\")))) (fromList [(\\\"f\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (If (FCall (FCall (Var \\\"x\\\") (Var \\\">\\\")) (Var \\\"y\\\")) (Var \\\"x\\\") (Var \\\"y\\\")))) (fromList []))])),(\\\"mul\\\",FuncV \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"not\\\",FuncV \\\"x\\\" (If (Var \\\"x\\\") (Literal (BoolL False)) (Literal (BoolL True))) (fromList [])),(\\\"or\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (If (Var \\\"x\\\") (Var \\\"x\\\") (Var \\\"y\\\")))) (fromList [])),(\\\"ord\\\",FuncV \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"pi\\\",NumV 3.1415927),(\\\"powN\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"n\\\" (If (Var \\\"n\\\") (FCall (FCall (Var \\\"*\\\") (Var \\\"x\\\")) (FCall (FCall (Var \\\"powN\\\") (Var \\\"x\\\")) (FCall (FCall (Var \\\"-\\\") (Var \\\"n\\\")) (Literal (NumL 1.0))))) (Literal (NumL 1.0))))) (fromList [])),(\\\"print\\\",FuncV \\\"x\\\" (FCall (Var \\\"put\\\") (FCall (Var \\\"show\\\") (Var \\\"x\\\"))) (fromList [])),(\\\"printOrExec\\\",FuncV \\\"x\\\" (If (FCall (FCall (Var \\\"==\\\") (FCall (Var \\\"typeof\\\") (Var \\\"x\\\"))) (Literal (ListL [Literal (CharL 'I'),Literal (CharL 'O')]))) (Var \\\"x\\\") (FCall (Var \\\"print\\\") (Var \\\"x\\\"))) (fromList [])),(\\\"printP\\\",FuncV \\\"x\\\" (FCall (Var \\\"put\\\") (FCall (Var \\\"showP\\\") (Var \\\"x\\\"))) (fromList [])),(\\\"pureIO\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"put\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"readLine\\\",IOV ReadLine),(\\\"rem\\\",FuncV \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"root\\\",FuncV \\\"r\\\" (Literal (LambdaL \\\"x\\\" (FCall (FCall (FCall (Var \\\"rootInner\\\") (Var \\\"r\\\")) (Var \\\"x\\\")) (FCall (Var \\\"round\\\") (FCall (FCall (Var \\\"/\\\") (Var \\\"x\\\")) (Literal (NumL 2.0))))))) (fromList [])),(\\\"rootInner\\\",FuncV \\\"r\\\" (Literal (LambdaL \\\"x\\\" (Literal (LambdaL \\\"guess\\\" (If (FCall (FCall (Var \\\"<\\\") (FCall (FCall (Var \\\"||\\\") (FCall (FCall (Var \\\"<\\\") (FCall (Var \\\"abs\\\") (FCall (FCall (Var \\\"-\\\") (FCall (FCall (Var \\\"powN\\\") (Var \\\"guess\\\")) (Var \\\"r\\\"))) (Var \\\"x\\\")))) (FCall (FCall (Var \\\"*\\\") (Literal (NumL 0.1))) (Var \\\"x\\\")))) (Var \\\"guess\\\"))) (Literal (NumL 1.0e-2))) (Var \\\"guess\\\") (FCall (FCall (FCall (Var \\\"rootInner\\\") (Var \\\"r\\\")) (Var \\\"x\\\")) (FCall (FCall (Var \\\"/\\\") (FCall (FCall (Var \\\"+\\\") (FCall (FCall (Var \\\"*\\\") (FCall (FCall (Var \\\"-\\\") (Var \\\"r\\\")) (Literal (NumL 1.0)))) (Var \\\"guess\\\"))) (FCall (FCall (Var \\\"/\\\") (Var \\\"x\\\")) (FCall (FCall (Var \\\"powN\\\") (Var \\\"guess\\\")) (FCall (FCall (Var \\\"-\\\") (Var \\\"r\\\")) (Literal (NumL 1.0))))))) (Literal (NumL 2.0))))))))) (fromList [])),(\\\"round\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"set\\\",FuncV \\\"n\\\" (Literal (LambdaL \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))))) (fromList [])),(\\\"showNum\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"sqrt\\\",FuncV \\\"x\\\" (FCall (FCall (Var \\\"root\\\") (Literal (NumL 2.0))) (Var \\\"x\\\")) (fromList [])),(\\\"subNum\\\",FuncV \\\"x\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"tail\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"throw\\\",FuncV \\\"type\\\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\\\"toBool\\\",FuncV \\\"x\\\" (FCall (Var \\\"f\\\") (FCall (Var \\\"g\\\") (Var \\\"x\\\"))) (fromList [(\\\"f\\\",FuncV \\\"x\\\" (If (Var \\\"x\\\") (Literal (BoolL False)) (Literal (BoolL True))) (fromList [])),(\\\"g\\\",FuncV \\\"x\\\" (If (Var \\\"x\\\") (Literal (BoolL False)) (Literal (BoolL True))) (fromList []))])),(\\\"typeof\\\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\\\"|>\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"f\\\" (FCall (Var \\\"f\\\") (Var \\\"x\\\")))) (fromList [])),(\\\"||\\\",FuncV \\\"x\\\" (Literal (LambdaL \\\"y\\\" (If (Var \\\"x\\\") (Var \\\"x\\\") (Var \\\"y\\\")))) (fromList [])),(\\\"\\\\176\\\",FuncV \\\"f\\\" (Literal (LambdaL \\\"g\\\" (Literal (LambdaL \\\"x\\\" (FCall (Var \\\"f\\\") (FCall (Var \\\"g\\\") (Var \\\"x\\\"))))))) (fromList [])),(\\\"\\\\8728\\\",FuncV \\\"f\\\" (Literal (LambdaL \\\"g\\\" (Literal (LambdaL \\\"x\\\" (FCall (Var \\\"f\\\") (FCall (Var \\\"g\\\") (Var \\\"x\\\"))))))) (fromList []))], getArgs = fromList [], getClosures = fromList [], getDests = [], getFClasses = fromList []}\"),(\"subNum\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"tail\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"throw\",FuncV \"type\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"toBool\",FuncV \"x\" (FCall (Var \"f\") (FCall (Var \"g\") (Var \"x\"))) (fromList [(\"f\",FuncV \"x\" (If (Var \"x\") (Literal (BoolL False)) (Literal (BoolL True))) (fromList [])),(\"g\",FuncV \"x\" (If (Var \"x\") (Literal (BoolL False)) (Literal (BoolL True))) (fromList []))])),(\"typeof\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"|>\",FuncV \"x\" (Literal (LambdaL \"f\" (FCall (Var \"f\") (Var \"x\")))) (fromList [])),(\"||\",FuncV \"x\" (Literal (LambdaL \"y\" (If (Var \"x\") (Var \"x\") (Var \"y\")))) (fromList [])),(\"\\176\",FuncV \"f\" (Literal (LambdaL \"g\" (Literal (LambdaL \"x\" (FCall (Var \"f\") (FCall (Var \"g\") (Var \"x\"))))))) (fromList [])),(\"\\8728\",FuncV \"f\" (Literal (LambdaL \"g\" (Literal (LambdaL \"x\" (FCall (Var \"f\") (FCall (Var \"g\") (Var \"x\"))))))) (fromList []))], getArgs = fromList [], getClosures = fromList [], getDests = [], getFClasses = fromList []}"),("<=",FuncV "x" (Literal (LambdaL "y" (FCall (Var "not") (FCall (FCall (Var ">") (Var "x")) (Var "y"))))) (fromList [])),("==",FuncV "x" (Literal (LambdaL "y" (FCall (Var "not") (FCall (FCall (Var "ord") (Var "x")) (Var "y"))))) (fromList [])),(">",FuncV "x" (Literal (LambdaL "y" (FCall (FCall (Var "eq") (Literal (NumL 1.0))) (FCall (FCall (Var "ord") (Var "x")) (Var "y"))))) (fromList [])),(">=",FuncV "x" (Literal (LambdaL "y" (FCall (Var "not") (FCall (FCall (Var "<") (Var "x")) (Var "y"))))) (fromList [])),(">>",FuncV "f" (Literal (LambdaL "g" (Literal (LambdaL "x" (FCall (Var "f") (FCall (Var "g") (Var "x"))))))) (fromList [])),("^",FuncV "x" (Literal (LambdaL "n" (If (Var "n") (FCall (FCall (Var "*") (Var "x")) (FCall (FCall (Var "powN") (Var "x")) (FCall (FCall (Var "-") (Var "n")) (Literal (NumL 1.0))))) (Literal (NumL 1.0))))) (fromList [])),("abs",FuncV "x" (If (FCall (FCall (Var "<") (Var "x")) (Literal (NumL 0.0))) (FCall (FCall (Var "-") (Literal (NumL 0.0))) (Var "x")) (Var "x")) (fromList [])),("addNum",FuncV "x" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),("all",FuncV "f" (FCall (FCall (Var "foldl") (Literal (LambdaL "acc" (Literal (LambdaL "cur" (FCall (FCall (Var "&&") (Var "acc")) (FCall (Var "f") (Var "cur")))))))) (Literal (BoolL True))) (fromList [])),("and",FuncV "x" (Literal (LambdaL "y" (If (Var "x") (Var "y") (Var "x")))) (fromList [])),("any",FuncV "f" (FCall (FCall (Var "foldl") (Literal (LambdaL "acc" (Literal (LambdaL "cur" (FCall (FCall (Var "||") (Var "acc")) (FCall (Var "f") (Var "cur")))))))) (Literal (BoolL False))) (fromList [])),("comp",FuncV "f" (Literal (LambdaL "g" (Literal (LambdaL "x" (FCall (Var "f") (FCall (Var "g") (Var "x"))))))) (fromList [])),("compIO",FuncV "io" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),("cons",FuncV "x" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),("const",FuncV "x" (Literal (LambdaL "y" (Var "x"))) (fromList [])),("debugRaw",NativeF (RTValue -> RTState -> RTValue) (fromList [])),("debugState",NativeF (RTValue -> RTState -> RTValue) (fromList [])),("div",FuncV "x" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),("divBy",FuncV "x" (Literal (LambdaL "y" (FCall (FCall (Var "f") (Var "y")) (Var "x")))) (fromList [("f",FuncV "x" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList []))])),("e",NumV 2.7182817),("entries",NativeF (RTValue -> RTState -> RTValue) (fromList [])),("eq",FuncV "x" (Literal (LambdaL "y" (FCall (Var "not") (FCall (FCall (Var "ord") (Var "x")) (Var "y"))))) (fromList [])),("eval",NativeF (RTValue -> RTState -> RTValue) (fromList [])),("exec",NativeF (RTValue -> RTState -> RTValue) (fromList [])),("factorial",FuncV "n" (If (Var "n") (FCall (FCall (Var "*") (Var "n")) (FCall (Var "factorial") (FCall (FCall (Var "-") (Var "n")) (Literal (NumL 1.0))))) (Literal (NumL 1.0))) (fromList [])),("flatMap",FuncV "f" (Literal (LambdaL "l" (If (Var "l") (Let (DestDef "HT" ["x","xs"] (Var "l")) (FCall (FCall (Var "+") (FCall (Var "f") (Var "x"))) (FCall (FCall (Var "flatMap") (Var "f")) (Var "xs")))) (Literal (ListL []))))) (fromList [])),("flip",FuncV "f" (Literal (LambdaL "x" (Literal (LambdaL "y" (FCall (FCall (Var "f") (Var "y")) (Var "x")))))) (fromList [])),("gcd",FuncV "x" (Literal (LambdaL "y" (FCall (FCall (Var "gcd_") (FCall (Var "abs") (Var "x"))) (FCall (Var "abs") (Var "y"))))) (fromList [])),("gcd_",FuncV "x" (Literal (LambdaL "y" (If (Var "y") (FCall (FCall (Var "gcd_") (Var "y")) (FCall (FCall (Var "rem") (Var "x")) (Var "y"))) (Var "x")))) (fromList [])),("get",FuncV "n" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),("gt",FuncV "x" (Literal (LambdaL "y" (FCall (FCall (Var "eq") (Literal (NumL 1.0))) (FCall (FCall (Var "ord") (Var "x")) (Var "y"))))) (fromList [])),("head",NativeF (RTValue -> RTState -> RTValue) (fromList [])),("id",FuncV "x" (Var "x") (fromList [])),("lt",FuncV "x" (Literal (LambdaL "y" (FCall (FCall (Var "eq") (Literal (NumL (-1.0)))) (FCall (FCall (Var "ord") (Var "x")) (Var "y"))))) (fromList [])),("mapI",FuncV "f" (Literal (LambdaL "l" (FCall (FCall (FCall (Var "mapIS") (Var "f")) (Var "l")) (Literal (NumL 0.0))))) (fromList [])),("mapIS",FuncV "f" (Literal (LambdaL "l" (Literal (LambdaL "i" (If (Var "l") (Let (DestDef "HT" ["x","xs"] (Var "l")) (FCall (FCall (Var "cons") (FCall (FCall (Var "f") (Var "x")) (Var "i"))) (FCall (FCall (FCall (Var "mapIS") (Var "f")) (Var "xs")) (FCall (FCall (Var "+") (Var "i")) (Literal (NumL 1.0)))))) (Literal (ListL []))))))) (fromList [])),("max",FuncV "x" (Literal (LambdaL "y" (If (FCall (FCall (Var "x") (Var ">")) (Var "y")) (Var "x") (Var "y")))) (fromList [])),("min",FuncV "x" (Literal (LambdaL "y" (FCall (FCall (Var "f") (Var "y")) (Var "x")))) (fromList [("f",FuncV "x" (Literal (LambdaL "y" (If (FCall (FCall (Var "x") (Var ">")) (Var "y")) (Var "x") (Var "y")))) (fromList []))])),("mul",FuncV "x" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),("not",FuncV "x" (If (Var "x") (Literal (BoolL False)) (Literal (BoolL True))) (fromList [])),("or",FuncV "x" (Literal (LambdaL "y" (If (Var "x") (Var "x") (Var "y")))) (fromList [])),("ord",FuncV "x" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),("padStart",FuncV "x" (Literal (LambdaL "i" (Literal (LambdaL "l" (FCall (FCall (Var "+") (FCall (FCall (Var "repeat") (Var "x")) (FCall (FCall (Var "-") (Var "i")) (FCall (Var "length") (Var "l"))))) (Var "l")))))) (fromList [])),("pi",NumV 3.1415927),("powN",FuncV "x" (Literal (LambdaL "n" (If (Var "n") (FCall (FCall (Var "*") (Var "x")) (FCall (FCall (Var "powN") (Var "x")) (FCall (FCall (Var "-") (Var "n")) (Literal (NumL 1.0))))) (Literal (NumL 1.0))))) (fromList [])),("print",FuncV "x" (FCall (Var "put") (FCall (Var "show") (Var "x"))) (fromList [])),("printOrExec",FuncV "x" (If (FCall (FCall (Var "==") (FCall (Var "typeof") (Var "x"))) (Literal (ListL [Literal (CharL 'I'),Literal (CharL 'O')]))) (Var "x") (FCall (Var "print") (Var "x"))) (fromList [])),("printP",FuncV "x" (FCall (Var "put") (FCall (Var "showP") (Var "x"))) (fromList [])),("pureIO",NativeF (RTValue -> RTState -> RTValue) (fromList [])),("put",NativeF (RTValue -> RTState -> RTValue) (fromList [])),("range",FuncV "s" (Literal (LambdaL "e" (If (FCall (FCall (Var ">=") (Var "s")) (Var "e")) (Literal (ListL [])) (FCall (FCall (Var "cons") (Var "s")) (FCall (FCall (Var "range") (FCall (FCall (Var "+") (Var "s")) (Literal (NumL 1.0)))) (Var "e")))))) (fromList [])),("rangeI",FuncV "s" (Literal (LambdaL "e" (FCall (FCall (Var "range") (Var "s")) (FCall (FCall (Var "+") (Var "e")) (Literal (NumL 1.0)))))) (fromList [])),("rangeStep",FuncV "s" (Literal (LambdaL "e" (Literal (LambdaL "step" (If (FCall (FCall (Var ">=") (Var "s")) (Var "e")) (Literal (ListL [])) (FCall (FCall (Var "cons") (Var "s")) (FCall (FCall (FCall (Var "rangeStep") (FCall (FCall (Var "+") (Var "s")) (Var "step"))) (Var "e")) (Var "step")))))))) (fromList [])),("readLine",IOV ReadLine),("rem",FuncV "x" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),("repeat",FuncV "x" (Literal (LambdaL "i" (If (FCall (FCall (Var "<=") (Var "i")) (Literal (NumL 0.0))) (Literal (ListL [])) (FCall (FCall (Var ":") (Var "x")) (FCall (FCall (Var "repeat") (Var "x")) (FCall (FCall (Var "-") (Var "i")) (Literal (NumL 1.0)))))))) (fromList [])),("root",FuncV "r" (Literal (LambdaL "x" (FCall (FCall (FCall (Var "rootInner") (Var "r")) (Var "x")) (FCall (Var "round") (FCall (FCall (Var "/") (Var "x")) (Literal (NumL 2.0))))))) (fromList [])),("rootInner",FuncV "r" (Literal (LambdaL "x" (Literal (LambdaL "guess" (If (FCall (FCall (Var "<") (FCall (FCall (Var "||") (FCall (FCall (Var "<") (FCall (Var "abs") (FCall (FCall (Var "-") (FCall (FCall (Var "powN") (Var "guess")) (Var "r"))) (Var "x")))) (FCall (FCall (Var "*") (Literal (NumL 0.1))) (Var "x")))) (Var "guess"))) (Literal (NumL 1.0e-2))) (Var "guess") (FCall (FCall (FCall (Var "rootInner") (Var "r")) (Var "x")) (FCall (FCall (Var "/") (FCall (FCall (Var "+") (FCall (FCall (Var "*") (FCall (FCall (Var "-") (Var "r")) (Literal (NumL 1.0)))) (Var "guess"))) (FCall (FCall (Var "/") (Var "x")) (FCall (FCall (Var "powN") (Var "guess")) (FCall (FCall (Var "-") (Var "r")) (Literal (NumL 1.0))))))) (Literal (NumL 2.0))))))))) (fromList [])),("round",NativeF (RTValue -> RTState -> RTValue) (fromList [])),("set",FuncV "n" (Literal (LambdaL "x" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))))) (fromList [])),("showNum",NativeF (RTValue -> RTState -> RTValue) (fromList [])),("skipLast",FuncV "i" (Literal (LambdaL "l" (FCall (FCall (Var "take") (FCall (FCall (Var "-") (FCall (Var "length") (Var "l"))) (Var "i"))) (Var "l")))) (fromList [])),("sqrt",FuncV "x" (FCall (FCall (Var "root") (Literal (NumL 2.0))) (Var "x")) (fromList [])),("subBy",ExceptionV "State" "Value sub does not exist in the current state! \n\nCurrent Args were: fromList []\n\nClosures were: fromList []\n\nThe Full State was: RTState {getVals = fromList [(\"!=\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (Var \"not\") (FCall (FCall (Var \"==\") (Var \"x\")) (Var \"y\"))))) (fromList [])),(\"&&\",FuncV \"x\" (Literal (LambdaL \"y\" (If (Var \"x\") (Var \"y\") (Var \"x\")))) (fromList [])),(\"*\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"/\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"/=\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (Var \"not\") (FCall (FCall (Var \"==\") (Var \"x\")) (Var \"y\"))))) (fromList [])),(\"<\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (FCall (Var \"eq\") (Literal (NumL (-1.0)))) (FCall (FCall (Var \"ord\") (Var \"x\")) (Var \"y\"))))) (fromList [])),(\"<=\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (Var \"not\") (FCall (FCall (Var \">\") (Var \"x\")) (Var \"y\"))))) (fromList [])),(\"==\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (Var \"not\") (FCall (FCall (Var \"ord\") (Var \"x\")) (Var \"y\"))))) (fromList [])),(\">\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (FCall (Var \"eq\") (Literal (NumL 1.0))) (FCall (FCall (Var \"ord\") (Var \"x\")) (Var \"y\"))))) (fromList [])),(\">=\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (Var \"not\") (FCall (FCall (Var \"<\") (Var \"x\")) (Var \"y\"))))) (fromList [])),(\">>\",FuncV \"f\" (Literal (LambdaL \"g\" (Literal (LambdaL \"x\" (FCall (Var \"f\") (FCall (Var \"g\") (Var \"x\"))))))) (fromList [])),(\"^\",FuncV \"x\" (Literal (LambdaL \"n\" (If (Var \"n\") (FCall (FCall (Var \"*\") (Var \"x\")) (FCall (FCall (Var \"powN\") (Var \"x\")) (FCall (FCall (Var \"-\") (Var \"n\")) (Literal (NumL 1.0))))) (Literal (NumL 1.0))))) (fromList [])),(\"addNum\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"and\",FuncV \"x\" (Literal (LambdaL \"y\" (If (Var \"x\") (Var \"y\") (Var \"x\")))) (fromList [])),(\"comp\",FuncV \"f\" (Literal (LambdaL \"g\" (Literal (LambdaL \"x\" (FCall (Var \"f\") (FCall (Var \"g\") (Var \"x\"))))))) (fromList [])),(\"compIO\",FuncV \"io\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"cons\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"const\",FuncV \"x\" (Literal (LambdaL \"y\" (Var \"x\"))) (fromList [])),(\"debugRaw\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"debugState\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"div\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"divBy\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (FCall (Var \"f\") (Var \"y\")) (Var \"x\")))) (fromList [(\"f\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList []))])),(\"e\",NumV 2.7182817),(\"entries\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"eq\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (Var \"not\") (FCall (FCall (Var \"ord\") (Var \"x\")) (Var \"y\"))))) (fromList [])),(\"eval\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"exec\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"factorial\",FuncV \"n\" (If (Var \"n\") (FCall (FCall (Var \"*\") (Var \"n\")) (FCall (Var \"factorial\") (FCall (FCall (Var \"-\") (Var \"n\")) (Literal (NumL 1.0))))) (Literal (NumL 1.0))) (fromList [])),(\"flip\",FuncV \"f\" (Literal (LambdaL \"x\" (Literal (LambdaL \"y\" (FCall (FCall (Var \"f\") (Var \"y\")) (Var \"x\")))))) (fromList [])),(\"get\",FuncV \"n\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"gt\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (FCall (Var \"eq\") (Literal (NumL 1.0))) (FCall (FCall (Var \"ord\") (Var \"x\")) (Var \"y\"))))) (fromList [])),(\"head\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"id\",FuncV \"x\" (Var \"x\") (fromList [])),(\"lt\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (FCall (Var \"eq\") (Literal (NumL (-1.0)))) (FCall (FCall (Var \"ord\") (Var \"x\")) (Var \"y\"))))) (fromList [])),(\"max\",FuncV \"x\" (Literal (LambdaL \"y\" (If (FCall (FCall (Var \"x\") (Var \">\")) (Var \"y\")) (Var \"x\") (Var \"y\")))) (fromList [])),(\"min\",FuncV \"x\" (Literal (LambdaL \"y\" (FCall (FCall (Var \"f\") (Var \"y\")) (Var \"x\")))) (fromList [(\"f\",FuncV \"x\" (Literal (LambdaL \"y\" (If (FCall (FCall (Var \"x\") (Var \">\")) (Var \"y\")) (Var \"x\") (Var \"y\")))) (fromList []))])),(\"mul\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"not\",FuncV \"x\" (If (Var \"x\") (Literal (BoolL False)) (Literal (BoolL True))) (fromList [])),(\"or\",FuncV \"x\" (Literal (LambdaL \"y\" (If (Var \"x\") (Var \"x\") (Var \"y\")))) (fromList [])),(\"ord\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"pi\",NumV 3.1415927),(\"powN\",FuncV \"x\" (Literal (LambdaL \"n\" (If (Var \"n\") (FCall (FCall (Var \"*\") (Var \"x\")) (FCall (FCall (Var \"powN\") (Var \"x\")) (FCall (FCall (Var \"-\") (Var \"n\")) (Literal (NumL 1.0))))) (Literal (NumL 1.0))))) (fromList [])),(\"print\",FuncV \"x\" (FCall (Var \"put\") (FCall (Var \"show\") (Var \"x\"))) (fromList [])),(\"printOrExec\",FuncV \"x\" (If (FCall (FCall (Var \"==\") (FCall (Var \"typeof\") (Var \"x\"))) (Literal (ListL [Literal (CharL 'I'),Literal (CharL 'O')]))) (Var \"x\") (FCall (Var \"print\") (Var \"x\"))) (fromList [])),(\"printP\",FuncV \"x\" (FCall (Var \"put\") (FCall (Var \"showP\") (Var \"x\"))) (fromList [])),(\"pureIO\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"put\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"readLine\",IOV ReadLine),(\"rem\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"root\",FuncV \"r\" (Literal (LambdaL \"x\" (FCall (FCall (FCall (Var \"rootInner\") (Var \"r\")) (Var \"x\")) (FCall (Var \"round\") (FCall (FCall (Var \"/\") (Var \"x\")) (Literal (NumL 2.0))))))) (fromList [])),(\"rootInner\",FuncV \"r\" (Literal (LambdaL \"x\" (Literal (LambdaL \"guess\" (If (FCall (FCall (Var \"<\") (FCall (FCall (Var \"||\") (FCall (FCall (Var \"<\") (FCall (Var \"abs\") (FCall (FCall (Var \"-\") (FCall (FCall (Var \"powN\") (Var \"guess\")) (Var \"r\"))) (Var \"x\")))) (FCall (FCall (Var \"*\") (Literal (NumL 0.1))) (Var \"x\")))) (Var \"guess\"))) (Literal (NumL 1.0e-2))) (Var \"guess\") (FCall (FCall (FCall (Var \"rootInner\") (Var \"r\")) (Var \"x\")) (FCall (FCall (Var \"/\") (FCall (FCall (Var \"+\") (FCall (FCall (Var \"*\") (FCall (FCall (Var \"-\") (Var \"r\")) (Literal (NumL 1.0)))) (Var \"guess\"))) (FCall (FCall (Var \"/\") (Var \"x\")) (FCall (FCall (Var \"powN\") (Var \"guess\")) (FCall (FCall (Var \"-\") (Var \"r\")) (Literal (NumL 1.0))))))) (Literal (NumL 2.0))))))))) (fromList [])),(\"round\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"set\",FuncV \"n\" (Literal (LambdaL \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))))) (fromList [])),(\"showNum\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"sqrt\",FuncV \"x\" (FCall (FCall (Var \"root\") (Literal (NumL 2.0))) (Var \"x\")) (fromList [])),(\"subNum\",FuncV \"x\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"tail\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"throw\",FuncV \"type\" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),(\"toBool\",FuncV \"x\" (FCall (Var \"f\") (FCall (Var \"g\") (Var \"x\"))) (fromList [(\"f\",FuncV \"x\" (If (Var \"x\") (Literal (BoolL False)) (Literal (BoolL True))) (fromList [])),(\"g\",FuncV \"x\" (If (Var \"x\") (Literal (BoolL False)) (Literal (BoolL True))) (fromList []))])),(\"typeof\",NativeF (RTValue -> RTState -> RTValue) (fromList [])),(\"|>\",FuncV \"x\" (Literal (LambdaL \"f\" (FCall (Var \"f\") (Var \"x\")))) (fromList [])),(\"||\",FuncV \"x\" (Literal (LambdaL \"y\" (If (Var \"x\") (Var \"x\") (Var \"y\")))) (fromList [])),(\"\\176\",FuncV \"f\" (Literal (LambdaL \"g\" (Literal (LambdaL \"x\" (FCall (Var \"f\") (FCall (Var \"g\") (Var \"x\"))))))) (fromList [])),(\"\\8728\",FuncV \"f\" (Literal (LambdaL \"g\" (Literal (LambdaL \"x\" (FCall (Var \"f\") (FCall (Var \"g\") (Var \"x\"))))))) (fromList []))], getArgs = fromList [], getClosures = fromList [], getDests = [], getFClasses = fromList []}"),("subNum",FuncV "x" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),("tail",NativeF (RTValue -> RTState -> RTValue) (fromList [])),("take",FuncV "i" (Literal (LambdaL "l" (If (FCall (FCall (Var "&&") (FCall (Var "toBool") (Var "l"))) (FCall (FCall (Var ">") (Var "i")) (Literal (NumL 0.0)))) (Let (DestDef "HT" ["x","xs"] (Var "l")) (FCall (FCall (Var ":") (Var "x")) (FCall (FCall (Var "take") (FCall (FCall (Var "-") (Var "i")) (Literal (NumL 1.0)))) (Var "xs")))) (Literal (ListL []))))) (fromList [])),("throw",FuncV "type" (Value (NativeF (RTValue -> RTState -> RTValue) (fromList []))) (fromList [])),("toBool",FuncV "x" (FCall (Var "f") (FCall (Var "g") (Var "x"))) (fromList [("f",FuncV "x" (If (Var "x") (Literal (BoolL False)) (Literal (BoolL True))) (fromList [])),("g",FuncV "x" (If (Var "x") (Literal (BoolL False)) (Literal (BoolL True))) (fromList []))])),("typeof",NativeF (RTValue -> RTState -> RTValue) (fromList [])),("|>",FuncV "x" (Literal (LambdaL "f" (FCall (Var "f") (Var "x")))) (fromList [])),("||",FuncV "x" (Literal (LambdaL "y" (If (Var "x") (Var "x") (Var "y")))) (fromList [])),("\176",FuncV "f" (Literal (LambdaL "g" (Literal (LambdaL "x" (FCall (Var "f") (FCall (Var "g") (Var "x"))))))) (fromList [])),("\8728",FuncV "f" (Literal (LambdaL "g" (Literal (LambdaL "x" (FCall (Var "f") (FCall (Var "g") (Var "x"))))))) (fromList []))], getArgs = fromList [("f",FuncV "x" (FCall (FCall (Var "==") (FCall (Var "typeof") (Var "x"))) (Literal (ListL [Literal (CharL 'C'),Literal (CharL 'h'),Literal (CharL 'a'),Literal (CharL 'r')]))) (fromList []))], getClosures = fromList [], getDests = [], getFClasses = fromList []}

 DefFClass "foldl" 2 (FClassInstance 20 (Var "foldlList"))
 DefFClass "show" 0 (FClassInstance 30 (Literal (LambdaL "x" (If (FCall (FCall (Var "&&") (FCall (FCall (Var "==") (FCall (Var "typeof") (Var "x"))) (Literal (ListL [Literal (CharL 'L'),Literal (CharL 'i'),Literal (CharL 's'),Literal (CharL 't')])))) (FCall (Var "isString") (Var "x"))) (FCall (FCall (Var "+") (FCall (FCall (Var "+") (Literal (ListL [Literal (CharL '"')]))) (FCall (FCall (FCall (Var "foldl") (Literal (LambdaL "a" (Literal (LambdaL "c" (FCall (FCall (Var "+") (Var "a")) (Literal (ListL [Var "c"])))))))) (Literal (ListL []))) (Var "x")))) (Literal (ListL [Literal (CharL '"')]))) (FCall (FCall (Var "throw") (Literal (ListL [Literal (CharL 'T'),Literal (CharL 'y'),Literal (CharL 'p'),Literal (CharL 'e')]))) (Literal (ListL [Literal (CharL 'N'),Literal (CharL 'o'),Literal (CharL 't'),Literal (CharL ' '),Literal (CharL 'a'),Literal (CharL ' '),Literal (CharL 'S'),Literal (CharL 't'),Literal (CharL 'r'),Literal (CharL 'i'),Literal (CharL 'n'),Literal (CharL 'g')])))))))
 DefFClass "show" 0 (FClassInstance 20 (FCall (FCall (Var "tclass") (Literal (ListL [Literal (CharL 'L'),Literal (CharL 'i'),Literal (CharL 's'),Literal (CharL 't')]))) (Literal (LambdaL "x" (FCall (FCall (Var "+") (FCall (FCall (Var "+") (Literal (ListL [Literal (CharL '[')]))) (FCall (Var "showListInner") (Var "x")))) (Literal (ListL [Literal (CharL ']')])))))))
 DefFClass "show" 0 (FClassInstance 20 (FCall (FCall (Var "tclass") (Literal (ListL [Literal (CharL 'R'),Literal (CharL 'e'),Literal (CharL 'c'),Literal (CharL 'o'),Literal (CharL 'r'),Literal (CharL 'd')]))) (Literal (LambdaL "x" (FCall (FCall (Var "+") (FCall (FCall (Var "+") (Literal (ListL [Literal (CharL '{')]))) (FCall (Var "showRecInner") (FCall (Var "entries") (Var "x"))))) (Literal (ListL [Literal (CharL '}')])))))))
 DefFClass "show" 0 (FClassInstance 20 (Var "showNum"))
 DefFClass "show" 0 (FClassInstance 20 (FCall (FCall (Var "tclass") (Literal (ListL [Literal (CharL 'C'),Literal (CharL 'h'),Literal (CharL 'a'),Literal (CharL 'r')]))) (Literal (LambdaL "x" (FCall (FCall (Var "+") (FCall (FCall (Var "+") (Literal (ListL [Literal (CharL '\'')]))) (Literal (ListL [Var "x"])))) (Literal (ListL [Literal (CharL '\'')])))))))
 DefFClass "show" 0 (FClassInstance 20 (FCall (FCall (Var "tclass") (Literal (ListL [Literal (CharL 'B'),Literal (CharL 'o'),Literal (CharL 'o'),Literal (CharL 'l')]))) (Literal (LambdaL "x" (If (Var "x") (Literal (ListL [Literal (CharL 'T'),Literal (CharL 'r'),Literal (CharL 'u'),Literal (CharL 'e')])) (Literal (ListL [Literal (CharL 'F'),Literal (CharL 'a'),Literal (CharL 'l'),Literal (CharL 's'),Literal (CharL 'e')])))))))
 DefFClass "show" 0 (FClassInstance 20 (FCall (FCall (Var "tclass") (Literal (ListL [Literal (CharL 'I'),Literal (CharL 'O')]))) (FCall (Var "const") (Literal (ListL [Literal (CharL '<'),Literal (CharL 'I'),Literal (CharL 'O'),Literal (CharL '>')])))))
 DefFClass "show" 0 (FClassInstance 20 (FCall (FCall (Var "tclass") (Literal (ListL [Literal (CharL 'F'),Literal (CharL 'u'),Literal (CharL 'n'),Literal (CharL 'c'),Literal (CharL 't'),Literal (CharL 'i'),Literal (CharL 'o'),Literal (CharL 'n')]))) (FCall (Var "const") (Literal (ListL [Literal (CharL '<'),Literal (CharL 'F'),Literal (CharL 'u'),Literal (CharL 'n'),Literal (CharL 'c'),Literal (CharL 't'),Literal (CharL 'i'),Literal (CharL 'o'),Literal (CharL 'n'),Literal (CharL '>')])))))
 DefFClass "show" 0 (FClassInstance 20 (FCall (FCall (Var "tclass") (Literal (ListL [Literal (CharL 'N'),Literal (CharL 'u'),Literal (CharL 'l'),Literal (CharL 'l')]))) (FCall (Var "const") (Literal (ListL [Literal (CharL 'N'),Literal (CharL 'u'),Literal (CharL 'l'),Literal (CharL 'l')])))))
 DefFClass "show" 0 (FClassInstance 0 (FCall (Var "const") (Literal (ListL [Literal (CharL '<'),Literal (CharL 'U'),Literal (CharL 'n'),Literal (CharL 'k'),Literal (CharL 'n'),Literal (CharL 'o'),Literal (CharL 'w'),Literal (CharL 'n'),Literal (CharL ' '),Literal (CharL 'T'),Literal (CharL 'y'),Literal (CharL 'p'),Literal (CharL 'e'),Literal (CharL '>')]))))
 DefFClass "showPInner" 0 (FClassInstance 20 (FCall (FCall (Var "tclass") (Literal (ListL [Literal (CharL 'R'),Literal (CharL 'e'),Literal (CharL 'c'),Literal (CharL 'o'),Literal (CharL 'r'),Literal (CharL 'd')]))) (Literal (LambdaL "r" (Literal (LambdaL "i" (FCall (FCall (Var "showPRecInner") (Var "r")) (Var "i"))))))))
 DefFClass "showPInner" 0 (FClassInstance 0 (Literal (LambdaL "x" (FCall (Var "const") (FCall (Var "show") (Var "x"))))))
 DefFClass "map" 1 (FClassInstance 20 (Literal (LambdaL "f" (FCall (FCall (Var "tclass") (Literal (ListL [Literal (CharL 'L'),Literal (CharL 'i'),Literal (CharL 's'),Literal (CharL 't')]))) (Literal (LambdaL "l" (If (Var "l") (Let (DestDef "HT" ["x","xs"] (Var "l")) (FCall (FCall (Var "cons") (FCall (Var "f") (Var "x"))) (FCall (FCall (Var "map") (Var "f")) (Var "xs")))) (Literal (ListL [])))))))))
 DefFClass "map" 1 (FClassInstance 20 (Literal (LambdaL "f" (FCall (FCall (Var "tclass") (Literal (ListL [Literal (CharL 'R'),Literal (CharL 'e'),Literal (CharL 'c'),Literal (CharL 'o'),Literal (CharL 'r'),Literal (CharL 'd')]))) (Literal (LambdaL "r" (FCall (Var "fromEntries") (FCall (FCall (Var "map") (Var "f")) (FCall (Var "entries") (Var "r"))))))))))
 DefFClass "+" 1 (FClassInstance 20 (Var "addNum"))
 DefFClass "+" 1 (FClassInstance 20 (Literal (LambdaL "a" (Literal (LambdaL "b" (If (FCall (FCall (Var "&&") (FCall (FCall (Var "==") (FCall (Var "typeof") (Var "a"))) (Literal (ListL [Literal (CharL 'L'),Literal (CharL 'i'),Literal (CharL 's'),Literal (CharL 't')])))) (FCall (FCall (Var "==") (FCall (Var "typeof") (Var "b"))) (Literal (ListL [Literal (CharL 'L'),Literal (CharL 'i'),Literal (CharL 's'),Literal (CharL 't')])))) (If (Var "a") (Let (DestDef "HT" ["x","xs"] (Var "a")) (FCall (FCall (Var ":") (Var "x")) (FCall (FCall (Var "+") (Var "xs")) (Var "b")))) (Var "b")) (FCall (FCall (Var "throw") (Literal (ListL [Literal (CharL 'T'),Literal (CharL 'y'),Literal (CharL 'p'),Literal (CharL 'e')]))) (Literal (ListL [Literal (CharL 'N'),Literal (CharL 'o'),Literal (CharL 't'),Literal (CharL ' '),Literal (CharL '2'),Literal (CharL ' '),Literal (CharL 'L'),Literal (CharL 'i'),Literal (CharL 's'),Literal (CharL 't'),Literal (CharL 's')])))))))))
 DefFClass "+" 1 (FClassInstance 20 (Literal (LambdaL "x" (Literal (LambdaL "y" (If (FCall (FCall (Var "&&") (FCall (FCall (Var "==") (FCall (Var "typeof") (Var "x"))) (Literal (ListL [Literal (CharL 'B'),Literal (CharL 'o'),Literal (CharL 'o'),Literal (CharL 'l')])))) (FCall (FCall (Var "==") (FCall (Var "typeof") (Var "y"))) (Literal (ListL [Literal (CharL 'B'),Literal (CharL 'o'),Literal (CharL 'o'),Literal (CharL 'l')])))) (FCall (FCall (Var "||") (Var "x")) (Var "y")) (FCall (FCall (Var "throw") (Literal (ListL [Literal (CharL 'T'),Literal (CharL 'y'),Literal (CharL 'p'),Literal (CharL 'e')]))) (Literal (ListL [Literal (CharL 'N'),Literal (CharL 'o'),Literal (CharL 't'),Literal (CharL ' '),Literal (CharL '2'),Literal (CharL ' '),Literal (CharL 'B'),Literal (CharL 'o'),Literal (CharL 'o'),Literal (CharL 'l'),Literal (CharL 's')])))))))))
 DefFClass "-" 1 (FClassInstance 20 (Var "subNum"))
 DefFClass "-" 1 (FClassInstance 20 (Literal (LambdaL "x" (Literal (LambdaL "y" (If (FCall (FCall (Var "&&") (FCall (FCall (Var "==") (FCall (Var "typeof") (Var "x"))) (Literal (ListL [Literal (CharL 'B'),Literal (CharL 'o'),Literal (CharL 'o'),Literal (CharL 'l')])))) (FCall (FCall (Var "==") (FCall (Var "typeof") (Var "y"))) (Literal (ListL [Literal (CharL 'B'),Literal (CharL 'o'),Literal (CharL 'o'),Literal (CharL 'l')])))) (If (Var "y") (Literal (BoolL False)) (Var "x")) (FCall (FCall (Var "throw") (Literal (ListL [Literal (CharL 'T'),Literal (CharL 'y'),Literal (CharL 'p'),Literal (CharL 'e')]))) (Literal (ListL [Literal (CharL 'N'),Literal (CharL 'o'),Literal (CharL 't'),Literal (CharL ' '),Literal (CharL '2'),Literal (CharL ' '),Literal (CharL 'B'),Literal (CharL 'o'),Literal (CharL 'o'),Literal (CharL 'l'),Literal (CharL 's')])))))))))
 DefFClass "filter" 1 (FClassInstance 20 (Literal (LambdaL "f" (FCall (FCall (Var "tclass") (Literal (ListL [Literal (CharL 'L'),Literal (CharL 'i'),Literal (CharL 's'),Literal (CharL 't')]))) (Literal (LambdaL "l" (If (Var "l") (Let (NormalDef "x" (FCall (Var "head") (Var "l"))) (Let (NormalDef "xs" (FCall (Var "tail") (Var "l"))) (If (FCall (Var "f") (Var "x")) (FCall (FCall (Var "cons") (Var "x")) (FCall (FCall (Var "filter") (Var "f")) (Var "xs"))) (FCall (FCall (Var "filter") (Var "f")) (Var "xs"))))) (Literal (ListL [])))))))))
 DefFClass "length" 0 (FClassInstance 20 (FCall (FCall (Var "tclass") (Literal (ListL [Literal (CharL 'L'),Literal (CharL 'i'),Literal (CharL 's'),Literal (CharL 't')]))) (Literal (LambdaL "l" (If (Var "l") (FCall (FCall (Var "+") (Literal (NumL 1.0))) (FCall (Var "length") (FCall (Var "tail") (Var "l")))) (Literal (NumL 0.0)))))))
 DefFClass "reverse" 0 (FClassInstance 20 (FCall (FCall (Var "tclass") (Literal (ListL [Literal (CharL 'L'),Literal (CharL 'i'),Literal (CharL 's'),Literal (CharL 't')]))) (Literal (LambdaL "l" (If (Var "l") (Let (DestDef "HT" ["x","xs"] (Var "l")) (FCall (FCall (Var "+") (FCall (Var "reverse") (Var "xs"))) (Literal (ListL [Var "x"])))) (Literal (ListL [])))))))
 DefFClass "getAt" 1 (FClassInstance 20 (Literal (LambdaL "n" (FCall (FCall (Var "tclass") (Literal (ListL [Literal (CharL 'L'),Literal (CharL 'i'),Literal (CharL 's'),Literal (CharL 't')]))) (Literal (LambdaL "l" (If (Var "l") (Let (DestDef "HT" ["x","xs"] (Var "l")) (If (Var "n") (FCall (FCall (Var "getAt") (FCall (FCall (Var "sub") (Var "n")) (Literal (NumL 1.0)))) (Var "xs")) (Var "x"))) (Literal NullL))))))))


 FuncV "y"
    (If
        (FCall (FCall (Var "is") (Var "y")) (Var "t"))
        (FCall (Var "f") (Var "y"))
        (FCall (FCall
                (Var "throw")
                (Literal (ListL [Literal (CharL 'F'),Literal (CharL 'C'),Literal (CharL 'l'),Literal (CharL 'a'),Literal (CharL 's'),Literal (CharL 's')]))) (FCall (FCall (Var "+") (Literal (ListL [Literal (CharL 'N'),Literal (CharL 'o'),Literal (CharL 't'),Literal (CharL ' '),Literal (CharL 'T'),Literal (CharL 'y'),Literal (CharL 'p'),Literal (CharL 'e'),Literal (CharL ' ')]))) (Var "t"))))
                (fromList [("f",FuncV "y" (If (FCall (FCall (Var "is") (Var "y")) (Var "t")) (FCall (Var "f") (Var "y")) (FCall (FCall (Var "throw") (Literal (ListL [Literal (CharL 'F'),Literal (CharL 'C'),Literal (CharL 'l'),Literal (CharL 'a'),Literal (CharL 's'),Literal (CharL 's')]))) (FCall (FCall (Var "+") (Literal (ListL [Literal (CharL 'N'),Literal (CharL 'o'),Literal (CharL 't'),Literal (CharL ' '),Literal (CharL 'T'),Literal (CharL 'y'),Literal (CharL 'p'),Literal (CharL 'e'),Literal (CharL ' ')]))) (Var "t"))))
                 (fromList [("f",FuncV "n" (Literal (LambdaL "l" (If (Var "l") (Let (DestDef "HT" ["x","xs"] (Var "l")) (If (Var "n") (FCall (FCall (Var "getAt") (FCall (FCall (Var "-") (Var "n")) (Literal (NumL 1.0)))) (Var "xs")) (Var "x"))) (Literal NullL)))) (fromList [])),("t",ListV [CharV 'N',CharV 'u',CharV 'm']),("tl",ListV [ListV [CharV 'N',CharV 'u',CharV 'm'],ListV [CharV 'L',CharV 'i',CharV 's',CharV 't']]),("ts",ListV [ListV [CharV 'L',CharV 'i',CharV 's',CharV 't']])])),("t",ListV [CharV 'L',CharV 'i',CharV 's',CharV 't']),("tl",ListV [ListV [CharV 'L',CharV 'i',CharV 's',CharV 't']]),("ts",ListV [])])



f = \y -> if (is y t)
        then (f y)
        else throw "FClass" (+ "Not type " t)
    where
    f = \y -> if (is y t)
        then f y
        else throw "FClass" (+ "Not type " t)
        where
        f = \n -> \l -> if l
            then let (HT x xs) = l in
                if n
                then getAt (- n 1) xs
                else x
            else Null



\y -> if (y `is` t)
    then f y
    else throw "FClass" ("Not Type " + t)
  where
    tl = ["List"]
    t = "List"
    ts = []
    f = \y -> if (y `is` t)
        then f y
        else throw "FClass" ("Not Type " +)
      where
        tl = ["Function", "List"]
        t = "Function",
        ts = ["List"]
        f = map

\x -> if (x `is` "Function")
    then \y -> if (y `is` "List")
        then f x y
        else throw "FClass" ("Not Type " + "List")
    else throw "FClass" ("Not Type " + "Function")

tclass ["Function", "List"] \x -> if (x `is` "List")
    then (\y -> if (y `is` "Function")
        then f y
        else throw
        ) x
    else throw

tclass [] f = f

tclass (t:ts) = \x -> if (x `is` t)
    then (tclass ts (f x))
    else throw

g = tclass ["Function", "List"] f =
    \x -> if (x `is` "Function")
        then (tclass ["List"] (f x))
        else throw...

tclass ["List"] f = \x -> if (x `is` "List")
    then f x
    else throw...

g x = (tclass ["List"] (f x))


("f",FuncV "f" (Literal (LambdaL "l" (If (Var "l") (Let (DestDef "HT" ["x","xs"] (Var "l")) (FCall (FCall (Var "cons") (FCall (Var "f") (Var "x"))) (FCall (FCall (Var "map") (Var "f")) (Var "xs")))) (Literal (ListL []))))) (fromList [])),
("t",ListV [CharV 'F',CharV 'u',CharV 'n',CharV 'c',CharV 't',CharV 'i',CharV 'o',CharV 'n']),
("tl",ListV [ListV [CharV 'F',CharV 'u',CharV 'n',CharV 'c',CharV 't',CharV 'i',CharV 'o',CharV 'n'],ListV [CharV 'L',CharV 'i',CharV 's',CharV 't']]),
("ts",ListV [ListV [CharV 'L',CharV 'i',CharV 's',CharV 't']]),



(FCall
    (FCall
        (FCall (Var "typeof") (Var "x"))
        (Var "=="))
    (Literal (ListL [Literal (CharL 'I'),Literal (CharL 'O')])))