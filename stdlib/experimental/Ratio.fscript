Ratio := Ratio enum:Num denom:Num;

first 2 30 += tclass ["Function", "Ratio"] (update "enum");

second 2 30 += tclass ["Function", "Ratio"] (update "denom");

bimap 3 30 += tclass ["Function", "Function", "Ratio"] \f g -> (first f) Â° (second g);

(%) = Ratio;

shorten = tclass "Ratio" \r -> let gd = gcd (get "enum" r) (get "denom" r) in
    bimap (divBy gd) (divBy gd) r;

(==) 2 30 += tclass ["Ratio", "Ratio"] \r1 r2 -> let s1 = shorten r1 in let s2 = shorten r2 in
    (s1.get "enum" == s2.get "enum") && (s1.get "denom" == s2.get "denom");

(*) 2 30 += tclass ["Ratio", "Ratio"] \r1 r2 -> shorten $ (r1.get "enum" * r2.get "enum") % (r1.get "denom" * r2.get "denom");

invert = \r -> (r.get "denom") % (r.get "enum");

(/) 2 30 += tclass ["Ratio", "Ratio"] \r1 r2 -> r1 * (invert r2);

show 1 30 += tclass "Ratio" \r -> let r_ = shorten r in "(" + (showInt (get "enum" r_)) + "/" + (showInt (get "denom" r_)) + ")";

showNoS = tclass "Ratio" \r -> "(" + (showInt $ r.get "enum") + "/" + (showInt $ r.get "denom") + ")";

(+) 2 50 += tclass ["Ratio", "Ratio"] \r1 r2 -> (((r1.get "enum") * (r2.get "denom")) + ((r2.get "enum") * (r1.get "denom"))) % (r1.get "denom" * r2.get "denom");

-- (1 % 3) + (1 % 2) = (2 % 6) + (3 % 6) = (5 % 6)
-- (1 % 3) + (1 % 2) = ((1 * 2) + (1 * 3)) % (3 * 2)

(-) 2 30 += tclass ["Ratio", "Ratio"] \r1 r2 -> (((r1.get "enum") * (r2.get "denom")) - ((r2.get "enum") * (r1.get "denom"))) % ((r1.get "denom") * (r2.get "denom"));
