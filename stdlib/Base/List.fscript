foldl 3 20 += foldlList;
foldlList = tclass ["Function", "ANY", "List"] \f z l -> if l then let (HT x xs) = l in
                              (foldlList f (f z x) xs)
                              else z;


mapI f l = mapIS f l 0;

mapIS f l i =
        if l
        then let (HT x xs) = l in
            cons (f x i) (mapIS f xs (i + 1))
        else
            [];

(<$>) = map;
(:) = cons;

rangeStep s e step = if (s >= e)
                                 then []
                                 else cons s (rangeStep (s + step) e step);

s :: e = if (s >= e)
    then []
    else s : ((s+1)::e);

rangeI s e = range s (e + 1);

(::+) = rangeI;


replicate x i = if (i <= 0)
    then []
    else (x : (replicate x (i - 1)));

<<HT l>> head l @ tail l;
<<HT2 l>> head l @ getAt 1 l @ drop 2 l;
<<HT3 l>> head l @ getAt 1 l @ getAt 2 l @ drop 3 l;
<<HT4 l>> head l @ getAt 1 l @ getAt 2 l @ getAt 3 l @ drop 4 l;
<<HT5 l>> head l @ getAt 1 l @ getAt 2 l @ getAt 3 l @ getAt 4 l @ drop 5 l;

fst = head;

snd = getAt 1;

<<T l>> head l @ getAt 1 l @ getAt 2 l @ getAt 3 l @ getAt 4 l @ getAt 5 l @ getAt 6 l @ getAt 7 l;

padStart x i l = ((replicate x (i - (length l))) + l);

take i l = if ((toBool l) && (i > 0))
    then let (HT x xs) = l in (x : (take (i - 1) xs))
    else [];

drop 2 20 += tclass ["Num", "List"] \n l -> if l
    then let (HT x xs) = l in if n <= 0
        then x:xs
        else drop (n - 1) xs
    else [];

skipLast i l = take ((length l) - i) l;


(>>=) 2 20 += tclass ["List", "Function"] (flip flatMap);

any = tclass ["Function", "List"] \f l -> if l
then let (HT x xs) = l in if f x
    then True
    else any f xs
else False;


all f l = if (f `is_` "Function") && (l `is_` "List") then
    if l
    then let x = head l in let xs = tail l in
            if f x
            then all f xs
            else False
    else True
else False;


delete = \y -> \l -> if l
    then let (HT x xs) = l in
        if (x == y)
        then xs
        else (x:(delete y xs))
    else [];

filter 2 20 += tclass ["Function", "List"] \f l -> if l then let x = head l in let xs = tail l in
    if f x
        then cons x (filter f xs)
        else filter f xs
    else [];

length 1 20 += tclass "List"
    \l -> if l
    then (1 + (length (tail l)))
    else 0;

reverse 1 20 += tclass "List"
    \l -> if l
    then let (HT x xs) = l in ((reverse xs) + [x])
    else [];

getAt 2 20 += tclass ["Num", "List"] \n -> \l -> if l
    then let (HT x xs) = l in
        if n
            then getAt (n - 1) xs
            else x
    else Null;

flatMap = tclass ["Function", "List"] \f -> \l ->
        if l
        then let (HT x xs) = l in
            ((f x) + (flatMap f xs))
        else
            [];

show 1 20 += tclass "List" \x -> "[" + (showListInner x) + "]";

showListInner = \l -> if l
    then let (HT x xs) = l in if xs
        then ((show x) + ", " + (showListInner xs))
        else show x
    else "";


map 2 20 += tclass ["Function", "List"] \f l ->
    if l then let (HT x xs) = l in
                 cons (f x) (map f xs)
                 else [];


(+) 2 20 += addList;

addList = tclass ["List", "List"] \a b -> if a
                  then let (HT x xs) = a in (x : (xs `addList` b))
                  else b;

(-) 2 10 += tclass "List" (flip delete);

(-) 2 20 += tclass ["List", "List"] \xs ys -> foldl (flip delete) xs ys;

(*) 2 20 += tclass ["List", "Num"] \l n -> flatMap id (replicate l n);

x !! ys = getAt x ys;

break 2 20 += tclass ["Function", "List"] \f l -> if l
    then let (HT x xs) = l in if f x
        then [[], x:xs]
        else let (T pass fail) = break f xs in [x:pass, fail]
    else [[], []];

partition 2 20 += tclass ["Function", "List"] \f l -> if l
    then let (HT x xs) = l in let (T pass fail) = partition f xs in if f x
        then [x:pass, fail]
        else [pass, x:fail]
    else [[], []];

last 1 20 += tclass "List" \l -> if l
    then let (HT x xs) = l in if xs
        then last xs
        else x
    else error "Argument" "Last expects a finite non-empty list";

init 1 20 += tclass "List" \l -> if l
    then let (HT2 x y xs) = l in if xs
        then x:(init (y:xs))
        else [x]
    else [];

scanl 3 20 += tclass ["Function", "ANY", "List"] \f z l -> if l
    then let (HT x xs) = l in [z:(scanl f z xs)]
    else [x];

splitAt 2 20 += tclass ["Num", "List"] \n l -> if n <= 0
    then [[], l]
    else let (HT x xs) = l in let (T f s) = splitAt (n - 1) xs in [x:f, s];

--TODO: Test: Will probably work, but foldl is still broken
elem 2 20 += tclass ["ANY", "List"] \v l -> any ((==)v) l;

contains = flip elem;

sort 1 20 += tclass "List" \l -> if l
    then let (HT x xs) = l in let (T sm lg) = partition (\y -> y < x) xs in
        sort sm + [x] + sort lg
    else [];

zipWith 3 20 += tclass ["Function", "List", "List"] \f l1 l2 -> if (l1 && l2)
    then let (HT x xs) = l1 in let (HT y ys) = l2 in (f x y):(zipWith f xs ys)
    else [];

zip 2 20 += tclass ["List", "List"] $ zipWith (\x y -> [x, y]);

--TODO: Not quite lazy enough
--iterate = tclass ["Function", "ANY"] \f x -> x:(iterate f (f x));

takeWhile 2 20 += tclass ["Function", "List"] \f l -> if l
then let (HT x xs) = l in if f x
    then x:(takeWhile f xs)
    else []
else [];
