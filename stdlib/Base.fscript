import stdlib/Base/List;
import stdlib/Base/IO;
import stdlib/Base/Math;
import stdlib/Base/Record;

-- General
id x = x;
f ° g = \x -> f (g x);
(∘) = (°);
const x y = x;
putLn = tclass "String" \x -> put (x + "\n");
print = putLn ° show;
printP = putLn ° showP;
printOrExec x = if ((typeof x) == "IO") then x else print x;
putRaw = putLn ° debugRaw;
not x = if x then False else True;
eq x y = not (ord x y);
toBool = not ∘ not;
flip f x y = f y x;
x |> f = f x;
(==) = eq;
x /= y = not (x == y);
(!=) = (/=);
x >> y = x >>= (const y);

is_ x t = ((typeof x) == t) || (if ((typeof x) == "Record") then ((get "Type" x) == t) else False);

isT = flip is;

is x t = (is_ x t) || ((t == "String") && isString x) || (t == "ANY");

isString = all (\x -> x `is_` "Char");

-- Boolean
x && y  = if x then y else x;
x || y  = if x then x else y;
x <  y  = -1 == (ord x y);
x >  y  = 1 == (ord x y);
x <= y   = not (x > y);
x >= y   = not (x < y);


-- JSON compatibility
null = Null;
false = False;
true = True;

-- FClasses
tclass tl f = if (tl && (isString tl))
    then tclass [tl] f
    else if tl
        then let (HT t ts) = tl in
            \y -> if (y `is` t)
                then tclass ts (f y)
                else throw "FClass" ("Not Type " + t) y
        else f;

fclass = \pl -> \f -> if (pl `is` "Function")
    then fclass [pl] f
    else if pl
        then let (HT p ps) = pl in
            \y -> if (p y)
                then fclass ps (f y)
                else throw "FClass" ("Does not match the predicate" + t) y
        else f;


show 1 30 += tclass "String" \x -> ['"'] + x + ['"'];

show 1 20 += tclass "Num" showNum;

show 1 20 += tclass "Char" \x -> ("'" + [x] + "'");

show 1 20 += tclass "Bool" \x -> if x then "True" else "False";

show 1 20 += tclass "Function" (const "<Function>");

show 1 20 += tclass "Null" (const "Null");

show 1 0 += const "<Unknown Type>";

showP = \x -> showPInner x 0;

showPInner 1 0 += \x -> const (show x);


(+) 2 20 += tclass ["Num", "Num"] addNum;

(+) 2 10 += tclass ["Bool", "Bool"] \x y -> x || y;

(-) 2 20 += tclass ["Num", "Num"] subNum;

(-) 2 20 += tclass ["Bool", "Bool"] \x y -> if y then False else x;

(*) 2 20 += tclass ["Num", "Num"] mulNum;

(/) 2 20 += tclass ["Num", "Num"] divNum;